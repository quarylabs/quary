// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.178.0
//   protoc               unknown
// source: quary/service/v1/dashboard_file.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "quary.service.v1";

export interface DashboardFile {
  title?: string | undefined;
  description?:
    | string
    | undefined;
  /**
   * Tags are used to group different parts of the project together. For example, you could tag all models that are
   * related to a specific department with the same tag.
   */
  tags: string[];
  items: DashboardItem[];
}

export interface DashboardItem {
  topLeftX: number;
  topLeftY: number;
  width: number;
  height: number;
  item?: { $case: "chart"; chart: DashboardChart } | undefined;
}

export interface DashboardChart {
  chart?: { $case: "reference"; reference: DashboardChartReference } | undefined;
}

export interface DashboardChartReference {
  reference: string;
}

function createBaseDashboardFile(): DashboardFile {
  return { title: undefined, description: undefined, tags: [], items: [] };
}

export const DashboardFile = {
  encode(message: DashboardFile, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== undefined) {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.items) {
      DashboardItem.encode(v!, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DashboardFile {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.items.push(DashboardItem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardFile {
    return {
      title: isSet(object.title) ? gt.String(object.title) : undefined,
      description: isSet(object.description) ? gt.String(object.description) : undefined,
      tags: gt.Array.isArray(object?.tags) ? object.tags.map((e: any) => gt.String(e)) : [],
      items: gt.Array.isArray(object?.items) ? object.items.map((e: any) => DashboardItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: DashboardFile): unknown {
    const obj: any = {};
    if (message.title !== undefined) {
      obj.title = message.title;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.items?.length) {
      obj.items = message.items.map((e) => DashboardItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardFile>, I>>(base?: I): DashboardFile {
    return DashboardFile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardFile>, I>>(object: I): DashboardFile {
    const message = createBaseDashboardFile();
    message.title = object.title ?? undefined;
    message.description = object.description ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.items = object.items?.map((e) => DashboardItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDashboardItem(): DashboardItem {
  return { topLeftX: 0, topLeftY: 0, width: 0, height: 0, item: undefined };
}

export const DashboardItem = {
  encode(message: DashboardItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.topLeftX !== 0) {
      writer.uint32(8).uint32(message.topLeftX);
    }
    if (message.topLeftY !== 0) {
      writer.uint32(16).uint32(message.topLeftY);
    }
    if (message.width !== 0) {
      writer.uint32(24).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(32).uint32(message.height);
    }
    switch (message.item?.$case) {
      case "chart":
        DashboardChart.encode(message.item.chart, writer.uint32(42).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DashboardItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.topLeftX = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.topLeftY = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.width = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.height = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.item = { $case: "chart", chart: DashboardChart.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardItem {
    return {
      topLeftX: isSet(object.topLeftX) ? gt.Number(object.topLeftX) : 0,
      topLeftY: isSet(object.topLeftY) ? gt.Number(object.topLeftY) : 0,
      width: isSet(object.width) ? gt.Number(object.width) : 0,
      height: isSet(object.height) ? gt.Number(object.height) : 0,
      item: isSet(object.chart) ? { $case: "chart", chart: DashboardChart.fromJSON(object.chart) } : undefined,
    };
  },

  toJSON(message: DashboardItem): unknown {
    const obj: any = {};
    if (message.topLeftX !== 0) {
      obj.topLeftX = Math.round(message.topLeftX);
    }
    if (message.topLeftY !== 0) {
      obj.topLeftY = Math.round(message.topLeftY);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.item?.$case === "chart") {
      obj.chart = DashboardChart.toJSON(message.item.chart);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardItem>, I>>(base?: I): DashboardItem {
    return DashboardItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardItem>, I>>(object: I): DashboardItem {
    const message = createBaseDashboardItem();
    message.topLeftX = object.topLeftX ?? 0;
    message.topLeftY = object.topLeftY ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    if (object.item?.$case === "chart" && object.item?.chart !== undefined && object.item?.chart !== null) {
      message.item = { $case: "chart", chart: DashboardChart.fromPartial(object.item.chart) };
    }
    return message;
  },
};

function createBaseDashboardChart(): DashboardChart {
  return { chart: undefined };
}

export const DashboardChart = {
  encode(message: DashboardChart, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    switch (message.chart?.$case) {
      case "reference":
        DashboardChartReference.encode(message.chart.reference, writer.uint32(10).fork()).ldelim();
        break;
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DashboardChart {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardChart();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.chart = { $case: "reference", reference: DashboardChartReference.decode(reader, reader.uint32()) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardChart {
    return {
      chart: isSet(object.reference)
        ? { $case: "reference", reference: DashboardChartReference.fromJSON(object.reference) }
        : undefined,
    };
  },

  toJSON(message: DashboardChart): unknown {
    const obj: any = {};
    if (message.chart?.$case === "reference") {
      obj.reference = DashboardChartReference.toJSON(message.chart.reference);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardChart>, I>>(base?: I): DashboardChart {
    return DashboardChart.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardChart>, I>>(object: I): DashboardChart {
    const message = createBaseDashboardChart();
    if (
      object.chart?.$case === "reference" && object.chart?.reference !== undefined && object.chart?.reference !== null
    ) {
      message.chart = { $case: "reference", reference: DashboardChartReference.fromPartial(object.chart.reference) };
    }
    return message;
  },
};

function createBaseDashboardChartReference(): DashboardChartReference {
  return { reference: "" };
}

export const DashboardChartReference = {
  encode(message: DashboardChartReference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reference !== "") {
      writer.uint32(10).string(message.reference);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DashboardChartReference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardChartReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.reference = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardChartReference {
    return { reference: isSet(object.reference) ? gt.String(object.reference) : "" };
  },

  toJSON(message: DashboardChartReference): unknown {
    const obj: any = {};
    if (message.reference !== "") {
      obj.reference = message.reference;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardChartReference>, I>>(base?: I): DashboardChartReference {
    return DashboardChartReference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardChartReference>, I>>(object: I): DashboardChartReference {
    const message = createBaseDashboardChartReference();
    message.reference = object.reference ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
