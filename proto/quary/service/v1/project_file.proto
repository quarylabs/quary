syntax = "proto3";

package quary.service.v1;

import "google/protobuf/struct.proto";

option java_multiple_files = true;

message ProjectFile {
  repeated ProjectFileSource sources = 1;
  repeated Model models = 2;
  repeated Snapshot snapshots = 3;

  message Model {
    string name = 1;
    // Tags are used to group different parts of the project together. For example, you could tag all models that are
    // related to a specific department with the same tag.
    repeated string tags = 6;
    optional string description = 2;
    // The materialization of the model, available types are specified by each database.
    optional string materialization = 4;
    repeated ModelTest tests = 5;

    optional google.protobuf.Struct database_config = 7;

    repeated ProjectFileColumn columns = 3;
  }

  message Snapshot {
    string name = 1;
    // Tags are used to group different parts of the project together. For example, you could tag all models that are
    // related to a specific department with the same tag.
    repeated string tags = 4;
    optional string description = 5;
    string unique_key = 2;
    SnapshotStrategy strategy = 3;
  }

  message SnapshotStrategy {
    oneof strategy_type {
      TimestampStrategy timestamp = 1;
    }
  }

  message TimestampStrategy {
    string updated_at = 1;
  }
}

message ProjectFileSource {
  string name = 1;
  // Tags are used to group different parts of the project together. For example, you could tag all sources that are
  // related to a specific department with the same tag.
  repeated string tags = 6;
  optional string description = 2;
  // The full path of the source table in the database. This is used to reference the table itself. For example:
  // - 'public.users' for where the schema is 'public' and the table is 'users'
  // - 'project_id_123.dataset_id_123.table_id_123' for a BigQuery table
  string path = 3;
  repeated ModelTest tests = 5;

  repeated ProjectFileColumn columns = 4;
}

message ProjectFileColumn {
  // Standard types are:
  // - not_null
  // - unique
  // - 'relationship' which takes into data (model and field)

  string name = 1;
  optional string description = 2;
  repeated ColumnTest tests = 3;
}

message ColumnTest {
  string type = 1;
  map<string, string> info = 2;
}

message ModelTest {
  string type = 1;
  map<string, string> info = 2;
}
