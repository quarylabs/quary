// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file quary/service/v1/wasm_rust_rpc_calls.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Empty } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Chart } from "./chart_pb";
import { file_quary_service_v1_chart } from "./chart_pb";
import type { ConnectionConfig } from "./connection_config_pb";
import { file_quary_service_v1_connection_config } from "./connection_config_pb";
import type { Dashboard } from "./dashboard_pb";
import { file_quary_service_v1_dashboard } from "./dashboard_pb";
import type { DashboardItem } from "./dashboard_file_pb";
import { file_quary_service_v1_dashboard_file } from "./dashboard_file_pb";
import type { Project } from "./project_pb";
import { file_quary_service_v1_project } from "./project_pb";
import type { ProjectDag } from "./project_dag_pb";
import { file_quary_service_v1_project_dag } from "./project_dag_pb";
import type { ColumnTest, ProjectFile } from "./project_file_pb";
import { file_quary_service_v1_project_file } from "./project_file_pb";
import type { Range } from "./range_pb";
import { file_quary_service_v1_range } from "./range_pb";
import type { Table } from "./table_pb";
import { file_quary_service_v1_table } from "./table_pb";
import type { DatabaseSource } from "./types_pb";
import { file_quary_service_v1_types } from "./types_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file quary/service/v1/wasm_rust_rpc_calls.proto.
 */
export const file_quary_service_v1_wasm_rust_rpc_calls: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_empty, file_google_protobuf_struct, file_quary_service_v1_chart, file_quary_service_v1_connection_config, file_quary_service_v1_dashboard, file_quary_service_v1_dashboard_file, file_quary_service_v1_project, file_quary_service_v1_project_dag, file_quary_service_v1_project_file, file_quary_service_v1_range, file_quary_service_v1_table, file_quary_service_v1_types]);

/**
 * @generated from message quary.service.v1.GetProjectConfigRequest
 */
export type GetProjectConfigRequest = Message<"quary.service.v1.GetProjectConfigRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;
};

/**
 * Describes the message quary.service.v1.GetProjectConfigRequest.
 * Use `create(GetProjectConfigRequestSchema)` to create a new message.
 */
export const GetProjectConfigRequestSchema: GenMessage<GetProjectConfigRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 0);

/**
 * @generated from message quary.service.v1.GetProjectConfigResponse
 */
export type GetProjectConfigResponse = Message<"quary.service.v1.GetProjectConfigResponse"> & {
  /**
   * @generated from field: quary.service.v1.ConnectionConfig connection_config = 1;
   */
  connectionConfig?: ConnectionConfig;
};

/**
 * Describes the message quary.service.v1.GetProjectConfigResponse.
 * Use `create(GetProjectConfigResponseSchema)` to create a new message.
 */
export const GetProjectConfigResponseSchema: GenMessage<GetProjectConfigResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 1);

/**
 * @generated from message quary.service.v1.InitFilesRequest
 */
export type InitFilesRequest = Message<"quary.service.v1.InitFilesRequest"> & {
};

/**
 * Describes the message quary.service.v1.InitFilesRequest.
 * Use `create(InitFilesRequestSchema)` to create a new message.
 */
export const InitFilesRequestSchema: GenMessage<InitFilesRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 2);

/**
 * @generated from message quary.service.v1.InitFilesResponse
 */
export type InitFilesResponse = Message<"quary.service.v1.InitFilesResponse"> & {
};

/**
 * Describes the message quary.service.v1.InitFilesResponse.
 * Use `create(InitFilesResponseSchema)` to create a new message.
 */
export const InitFilesResponseSchema: GenMessage<InitFilesResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 3);

/**
 * @generated from message quary.service.v1.IsPathEmptyRequest
 */
export type IsPathEmptyRequest = Message<"quary.service.v1.IsPathEmptyRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;
};

/**
 * Describes the message quary.service.v1.IsPathEmptyRequest.
 * Use `create(IsPathEmptyRequestSchema)` to create a new message.
 */
export const IsPathEmptyRequestSchema: GenMessage<IsPathEmptyRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 4);

/**
 * @generated from message quary.service.v1.IsPathEmptyResponse
 */
export type IsPathEmptyResponse = Message<"quary.service.v1.IsPathEmptyResponse"> & {
  /**
   * @generated from field: bool is_empty = 1;
   */
  isEmpty: boolean;
};

/**
 * Describes the message quary.service.v1.IsPathEmptyResponse.
 * Use `create(IsPathEmptyResponseSchema)` to create a new message.
 */
export const IsPathEmptyResponseSchema: GenMessage<IsPathEmptyResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 5);

/**
 * @generated from message quary.service.v1.GenerateProjectFilesRequest
 */
export type GenerateProjectFilesRequest = Message<"quary.service.v1.GenerateProjectFilesRequest"> & {
  /**
   * @generated from field: quary.service.v1.ConnectionConfig connection_config = 1;
   */
  connectionConfig?: ConnectionConfig;
};

/**
 * Describes the message quary.service.v1.GenerateProjectFilesRequest.
 * Use `create(GenerateProjectFilesRequestSchema)` to create a new message.
 */
export const GenerateProjectFilesRequestSchema: GenMessage<GenerateProjectFilesRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 6);

/**
 * @generated from message quary.service.v1.GenerateProjectFilesResponse
 */
export type GenerateProjectFilesResponse = Message<"quary.service.v1.GenerateProjectFilesResponse"> & {
};

/**
 * Describes the message quary.service.v1.GenerateProjectFilesResponse.
 * Use `create(GenerateProjectFilesResponseSchema)` to create a new message.
 */
export const GenerateProjectFilesResponseSchema: GenMessage<GenerateProjectFilesResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 7);

/**
 * @generated from message quary.service.v1.StringifyProjectFileRequest
 */
export type StringifyProjectFileRequest = Message<"quary.service.v1.StringifyProjectFileRequest"> & {
  /**
   * @generated from field: quary.service.v1.ProjectFile project_file = 1;
   */
  projectFile?: ProjectFile;
};

/**
 * Describes the message quary.service.v1.StringifyProjectFileRequest.
 * Use `create(StringifyProjectFileRequestSchema)` to create a new message.
 */
export const StringifyProjectFileRequestSchema: GenMessage<StringifyProjectFileRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 8);

/**
 * @generated from message quary.service.v1.StringifyProjectFileResponse
 */
export type StringifyProjectFileResponse = Message<"quary.service.v1.StringifyProjectFileResponse"> & {
  /**
   * @generated from field: string stringified_project_file = 1;
   */
  stringifiedProjectFile: string;
};

/**
 * Describes the message quary.service.v1.StringifyProjectFileResponse.
 * Use `create(StringifyProjectFileResponseSchema)` to create a new message.
 */
export const StringifyProjectFileResponseSchema: GenMessage<StringifyProjectFileResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 9);

/**
 * @generated from message quary.service.v1.ListAssetsRequest
 */
export type ListAssetsRequest = Message<"quary.service.v1.ListAssetsRequest"> & {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot: string;

  /**
   * @generated from field: quary.service.v1.ListAssetsRequest.AssetsToSkip assets_to_skip = 4;
   */
  assetsToSkip: ListAssetsRequest_AssetsToSkip;
};

/**
 * Describes the message quary.service.v1.ListAssetsRequest.
 * Use `create(ListAssetsRequestSchema)` to create a new message.
 */
export const ListAssetsRequestSchema: GenMessage<ListAssetsRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 10);

/**
 * @generated from enum quary.service.v1.ListAssetsRequest.AssetsToSkip
 */
export enum ListAssetsRequest_AssetsToSkip {
  /**
   * @generated from enum value: ASSETS_TO_SKIP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSETS_TO_SKIP_NONE = 1;
   */
  NONE = 1,

  /**
   * @generated from enum value: ASSETS_TO_SKIP_CHARTS_AND_DASHBOARDS = 2;
   */
  CHARTS_AND_DASHBOARDS = 2,

  /**
   * @generated from enum value: ASSETS_TO_SKIP_DASHBOARDS = 3;
   */
  DASHBOARDS = 3,
}

/**
 * Describes the enum quary.service.v1.ListAssetsRequest.AssetsToSkip.
 */
export const ListAssetsRequest_AssetsToSkipSchema: GenEnum<ListAssetsRequest_AssetsToSkip> = /*@__PURE__*/
  enumDesc(file_quary_service_v1_wasm_rust_rpc_calls, 10, 0);

/**
 * @generated from message quary.service.v1.ListAssetsResponse
 */
export type ListAssetsResponse = Message<"quary.service.v1.ListAssetsResponse"> & {
  /**
   * @generated from field: repeated quary.service.v1.ListAssetsResponse.Asset assets = 1;
   */
  assets: ListAssetsResponse_Asset[];
};

/**
 * Describes the message quary.service.v1.ListAssetsResponse.
 * Use `create(ListAssetsResponseSchema)` to create a new message.
 */
export const ListAssetsResponseSchema: GenMessage<ListAssetsResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 11);

/**
 * TODO This asset type should probably be refactored to just use the core types.
 *
 * @generated from message quary.service.v1.ListAssetsResponse.Asset
 */
export type ListAssetsResponse_Asset = Message<"quary.service.v1.ListAssetsResponse.Asset"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[];

  /**
   * @generated from field: quary.service.v1.ListAssetsResponse.Asset.AssetType asset_type = 3;
   */
  assetType: ListAssetsResponse_Asset_AssetType;

  /**
   * @generated from field: string file_path = 4;
   */
  filePath: string;
};

/**
 * Describes the message quary.service.v1.ListAssetsResponse.Asset.
 * Use `create(ListAssetsResponse_AssetSchema)` to create a new message.
 */
export const ListAssetsResponse_AssetSchema: GenMessage<ListAssetsResponse_Asset> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 11, 0);

/**
 * @generated from enum quary.service.v1.ListAssetsResponse.Asset.AssetType
 */
export enum ListAssetsResponse_Asset_AssetType {
  /**
   * @generated from enum value: ASSET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_TYPE_MODEL = 1;
   */
  MODEL = 1,

  /**
   * @generated from enum value: ASSET_TYPE_SEED = 2;
   */
  SEED = 2,

  /**
   * @generated from enum value: ASSET_TYPE_SOURCE = 3;
   */
  SOURCE = 3,

  /**
   * @generated from enum value: ASSET_TYPE_SNAPSHOT = 4;
   */
  SNAPSHOT = 4,

  /**
   * @generated from enum value: ASSET_TYPE_CHART = 5;
   */
  CHART = 5,

  /**
   * @generated from enum value: ASSET_TYPE_DASHBOARD = 6;
   */
  DASHBOARD = 6,
}

/**
 * Describes the enum quary.service.v1.ListAssetsResponse.Asset.AssetType.
 */
export const ListAssetsResponse_Asset_AssetTypeSchema: GenEnum<ListAssetsResponse_Asset_AssetType> = /*@__PURE__*/
  enumDesc(file_quary_service_v1_wasm_rust_rpc_calls, 11, 0, 0);

/**
 * @generated from message quary.service.v1.ParseProjectRequest
 */
export type ParseProjectRequest = Message<"quary.service.v1.ParseProjectRequest"> & {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot: string;
};

/**
 * Describes the message quary.service.v1.ParseProjectRequest.
 * Use `create(ParseProjectRequestSchema)` to create a new message.
 */
export const ParseProjectRequestSchema: GenMessage<ParseProjectRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 12);

/**
 * @generated from message quary.service.v1.ParseProjectResponse
 */
export type ParseProjectResponse = Message<"quary.service.v1.ParseProjectResponse"> & {
  /**
   * @generated from field: quary.service.v1.Project project = 1;
   */
  project?: Project;
};

/**
 * Describes the message quary.service.v1.ParseProjectResponse.
 * Use `create(ParseProjectResponseSchema)` to create a new message.
 */
export const ParseProjectResponseSchema: GenMessage<ParseProjectResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 13);

/**
 * @generated from message quary.service.v1.RenderSchemaRequest
 */
export type RenderSchemaRequest = Message<"quary.service.v1.RenderSchemaRequest"> & {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot: string;
};

/**
 * Describes the message quary.service.v1.RenderSchemaRequest.
 * Use `create(RenderSchemaRequestSchema)` to create a new message.
 */
export const RenderSchemaRequestSchema: GenMessage<RenderSchemaRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 14);

/**
 * @generated from message quary.service.v1.RenderSchemaResponse
 */
export type RenderSchemaResponse = Message<"quary.service.v1.RenderSchemaResponse"> & {
  /**
   * @generated from field: string schema = 1;
   */
  schema: string;
};

/**
 * Describes the message quary.service.v1.RenderSchemaResponse.
 * Use `create(RenderSchemaResponseSchema)` to create a new message.
 */
export const RenderSchemaResponseSchema: GenMessage<RenderSchemaResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 15);

/**
 * @generated from message quary.service.v1.ReturnSQLForSeedsAndModelsRequest
 */
export type ReturnSQLForSeedsAndModelsRequest = Message<"quary.service.v1.ReturnSQLForSeedsAndModelsRequest"> & {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot: string;

  /**
   * @generated from field: string db_qualifier = 4;
   */
  dbQualifier: string;
};

/**
 * Describes the message quary.service.v1.ReturnSQLForSeedsAndModelsRequest.
 * Use `create(ReturnSQLForSeedsAndModelsRequestSchema)` to create a new message.
 */
export const ReturnSQLForSeedsAndModelsRequestSchema: GenMessage<ReturnSQLForSeedsAndModelsRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 16);

/**
 * @generated from message quary.service.v1.ReturnSQLForSeedsAndModelsResponse
 */
export type ReturnSQLForSeedsAndModelsResponse = Message<"quary.service.v1.ReturnSQLForSeedsAndModelsResponse"> & {
  /**
   * @generated from field: repeated string sql = 1;
   */
  sql: string[];

  /**
   * @generated from field: quary.service.v1.Project project = 2;
   */
  project?: Project;
};

/**
 * Describes the message quary.service.v1.ReturnSQLForSeedsAndModelsResponse.
 * Use `create(ReturnSQLForSeedsAndModelsResponseSchema)` to create a new message.
 */
export const ReturnSQLForSeedsAndModelsResponseSchema: GenMessage<ReturnSQLForSeedsAndModelsResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 17);

/**
 * @generated from message quary.service.v1.ReturnFullProjectDagRequest
 */
export type ReturnFullProjectDagRequest = Message<"quary.service.v1.ReturnFullProjectDagRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;
};

/**
 * Describes the message quary.service.v1.ReturnFullProjectDagRequest.
 * Use `create(ReturnFullProjectDagRequestSchema)` to create a new message.
 */
export const ReturnFullProjectDagRequestSchema: GenMessage<ReturnFullProjectDagRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 18);

/**
 * @generated from message quary.service.v1.ReturnFullProjectDagResponse
 */
export type ReturnFullProjectDagResponse = Message<"quary.service.v1.ReturnFullProjectDagResponse"> & {
  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 1;
   */
  dag?: ProjectDag;
};

/**
 * Describes the message quary.service.v1.ReturnFullProjectDagResponse.
 * Use `create(ReturnFullProjectDagResponseSchema)` to create a new message.
 */
export const ReturnFullProjectDagResponseSchema: GenMessage<ReturnFullProjectDagResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 19);

/**
 * @generated from message quary.service.v1.ReturnDataForDocViewRequest
 */
export type ReturnDataForDocViewRequest = Message<"quary.service.v1.ReturnDataForDocViewRequest"> & {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot: string;

  /**
   * @generated from field: string asset_name = 2;
   */
  assetName: string;

  /**
   * cache_view defines whether or not to use the cached views in the returned sql and dag.
   *
   * @generated from field: quary.service.v1.CacheViewInformation cache_view_information = 3;
   */
  cacheViewInformation?: CacheViewInformation;
};

/**
 * Describes the message quary.service.v1.ReturnDataForDocViewRequest.
 * Use `create(ReturnDataForDocViewRequestSchema)` to create a new message.
 */
export const ReturnDataForDocViewRequestSchema: GenMessage<ReturnDataForDocViewRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 20);

/**
 * @generated from message quary.service.v1.ReturnDataForDocViewResponse
 */
export type ReturnDataForDocViewResponse = Message<"quary.service.v1.ReturnDataForDocViewResponse"> & {
  /**
   * @generated from field: string full_sql = 1;
   */
  fullSql: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 3;
   */
  dag?: ProjectDag;

  /**
   * @generated from field: bool is_asset_in_schema_files = 5;
   */
  isAssetInSchemaFiles: boolean;
};

/**
 * Describes the message quary.service.v1.ReturnDataForDocViewResponse.
 * Use `create(ReturnDataForDocViewResponseSchema)` to create a new message.
 */
export const ReturnDataForDocViewResponseSchema: GenMessage<ReturnDataForDocViewResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 21);

/**
 * @generated from message quary.service.v1.ReturnFullSqlForAssetRequest
 */
export type ReturnFullSqlForAssetRequest = Message<"quary.service.v1.ReturnFullSqlForAssetRequest"> & {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot: string;

  /**
   * @generated from field: string asset_name = 2;
   */
  assetName: string;

  /**
   * cache_view defines whether or not to use the cached views in the returned sql and dag.
   *
   * @generated from field: quary.service.v1.CacheViewInformation cache_view_information = 3;
   */
  cacheViewInformation?: CacheViewInformation;
};

/**
 * Describes the message quary.service.v1.ReturnFullSqlForAssetRequest.
 * Use `create(ReturnFullSqlForAssetRequestSchema)` to create a new message.
 */
export const ReturnFullSqlForAssetRequestSchema: GenMessage<ReturnFullSqlForAssetRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 22);

/**
 * @generated from message quary.service.v1.CacheViewInformation
 */
export type CacheViewInformation = Message<"quary.service.v1.CacheViewInformation"> & {
  /**
   * @generated from oneof quary.service.v1.CacheViewInformation.cache_view
   */
  cacheView: {
    /**
     * @generated from field: quary.service.v1.CacheViewInformationPaths cache_view_information = 1;
     */
    value: CacheViewInformationPaths;
    case: "cacheViewInformation";
  } | {
    /**
     * @generated from field: google.protobuf.Empty do_not_use = 2;
     */
    value: Empty;
    case: "doNotUse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.CacheViewInformation.
 * Use `create(CacheViewInformationSchema)` to create a new message.
 */
export const CacheViewInformationSchema: GenMessage<CacheViewInformation> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 23);

/**
 * @generated from message quary.service.v1.CacheViewInformationPaths
 */
export type CacheViewInformationPaths = Message<"quary.service.v1.CacheViewInformationPaths"> & {
  /**
   * @generated from field: repeated string cache_view_paths = 1;
   */
  cacheViewPaths: string[];
};

/**
 * Describes the message quary.service.v1.CacheViewInformationPaths.
 * Use `create(CacheViewInformationPathsSchema)` to create a new message.
 */
export const CacheViewInformationPathsSchema: GenMessage<CacheViewInformationPaths> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 24);

/**
 * @generated from message quary.service.v1.ReturnFullSqlForAssetResponse
 */
export type ReturnFullSqlForAssetResponse = Message<"quary.service.v1.ReturnFullSqlForAssetResponse"> & {
  /**
   * @generated from field: string full_sql = 1;
   */
  fullSql: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 3;
   */
  dag?: ProjectDag;
};

/**
 * Describes the message quary.service.v1.ReturnFullSqlForAssetResponse.
 * Use `create(ReturnFullSqlForAssetResponseSchema)` to create a new message.
 */
export const ReturnFullSqlForAssetResponseSchema: GenMessage<ReturnFullSqlForAssetResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 25);

/**
 * @generated from message quary.service.v1.GetModelTableRequest
 */
export type GetModelTableRequest = Message<"quary.service.v1.GetModelTableRequest"> & {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_name = 4;
   */
  modelName: string;
};

/**
 * Describes the message quary.service.v1.GetModelTableRequest.
 * Use `create(GetModelTableRequestSchema)` to create a new message.
 */
export const GetModelTableRequestSchema: GenMessage<GetModelTableRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 26);

/**
 * @generated from message quary.service.v1.GetModelTableResponse
 */
export type GetModelTableResponse = Message<"quary.service.v1.GetModelTableResponse"> & {
  /**
   * @generated from field: quary.service.v1.Table table = 2;
   */
  table?: Table;
};

/**
 * Describes the message quary.service.v1.GetModelTableResponse.
 * Use `create(GetModelTableResponseSchema)` to create a new message.
 */
export const GetModelTableResponseSchema: GenMessage<GetModelTableResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 27);

/**
 * @generated from message quary.service.v1.CreateModelSchemaEntryRequest
 */
export type CreateModelSchemaEntryRequest = Message<"quary.service.v1.CreateModelSchemaEntryRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_name = 3;
   */
  modelName: string;
};

/**
 * Describes the message quary.service.v1.CreateModelSchemaEntryRequest.
 * Use `create(CreateModelSchemaEntryRequestSchema)` to create a new message.
 */
export const CreateModelSchemaEntryRequestSchema: GenMessage<CreateModelSchemaEntryRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 28);

/**
 * @generated from message quary.service.v1.CreateModelSchemaEntryResponse
 */
export type CreateModelSchemaEntryResponse = Message<"quary.service.v1.CreateModelSchemaEntryResponse"> & {
  /**
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * @generated from field: quary.service.v1.ProjectFile project_file = 2;
   */
  projectFile?: ProjectFile;
};

/**
 * Describes the message quary.service.v1.CreateModelSchemaEntryResponse.
 * Use `create(CreateModelSchemaEntryResponseSchema)` to create a new message.
 */
export const CreateModelSchemaEntryResponseSchema: GenMessage<CreateModelSchemaEntryResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 29);

/**
 * @generated from message quary.service.v1.UpdateAssetDescriptionRequest
 */
export type UpdateAssetDescriptionRequest = Message<"quary.service.v1.UpdateAssetDescriptionRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string asset_name = 3;
   */
  assetName: string;

  /**
   * @generated from field: string description = 4;
   */
  description: string;
};

/**
 * Describes the message quary.service.v1.UpdateAssetDescriptionRequest.
 * Use `create(UpdateAssetDescriptionRequestSchema)` to create a new message.
 */
export const UpdateAssetDescriptionRequestSchema: GenMessage<UpdateAssetDescriptionRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 30);

/**
 * @generated from message quary.service.v1.UpdateAssetDescriptionResponse
 */
export type UpdateAssetDescriptionResponse = Message<"quary.service.v1.UpdateAssetDescriptionResponse"> & {
};

/**
 * Describes the message quary.service.v1.UpdateAssetDescriptionResponse.
 * Use `create(UpdateAssetDescriptionResponseSchema)` to create a new message.
 */
export const UpdateAssetDescriptionResponseSchema: GenMessage<UpdateAssetDescriptionResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 31);

/**
 * @generated from message quary.service.v1.AddColumnToModelOrSourceRequest
 */
export type AddColumnToModelOrSourceRequest = Message<"quary.service.v1.AddColumnToModelOrSourceRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName: string;

  /**
   * @generated from field: string column_name = 4;
   */
  columnName: string;
};

/**
 * Describes the message quary.service.v1.AddColumnToModelOrSourceRequest.
 * Use `create(AddColumnToModelOrSourceRequestSchema)` to create a new message.
 */
export const AddColumnToModelOrSourceRequestSchema: GenMessage<AddColumnToModelOrSourceRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 32);

/**
 * @generated from message quary.service.v1.AddColumnToModelOrSourceResponse
 */
export type AddColumnToModelOrSourceResponse = Message<"quary.service.v1.AddColumnToModelOrSourceResponse"> & {
};

/**
 * Describes the message quary.service.v1.AddColumnToModelOrSourceResponse.
 * Use `create(AddColumnToModelOrSourceResponseSchema)` to create a new message.
 */
export const AddColumnToModelOrSourceResponseSchema: GenMessage<AddColumnToModelOrSourceResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 33);

/**
 * @generated from message quary.service.v1.UpdateModelOrSourceColumnDescriptionRequest
 */
export type UpdateModelOrSourceColumnDescriptionRequest = Message<"quary.service.v1.UpdateModelOrSourceColumnDescriptionRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName: string;

  /**
   * @generated from field: string column_name = 4;
   */
  columnName: string;

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;
};

/**
 * Describes the message quary.service.v1.UpdateModelOrSourceColumnDescriptionRequest.
 * Use `create(UpdateModelOrSourceColumnDescriptionRequestSchema)` to create a new message.
 */
export const UpdateModelOrSourceColumnDescriptionRequestSchema: GenMessage<UpdateModelOrSourceColumnDescriptionRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 34);

/**
 * @generated from message quary.service.v1.UpdateModelOrSourceColumnDescriptionResponse
 */
export type UpdateModelOrSourceColumnDescriptionResponse = Message<"quary.service.v1.UpdateModelOrSourceColumnDescriptionResponse"> & {
};

/**
 * Describes the message quary.service.v1.UpdateModelOrSourceColumnDescriptionResponse.
 * Use `create(UpdateModelOrSourceColumnDescriptionResponseSchema)` to create a new message.
 */
export const UpdateModelOrSourceColumnDescriptionResponseSchema: GenMessage<UpdateModelOrSourceColumnDescriptionResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 35);

/**
 * @generated from message quary.service.v1.AddColumnTestToModelOrSourceColumnRequest
 */
export type AddColumnTestToModelOrSourceColumnRequest = Message<"quary.service.v1.AddColumnTestToModelOrSourceColumnRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName: string;

  /**
   * @generated from field: string column_name = 4;
   */
  columnName: string;

  /**
   * @generated from field: quary.service.v1.ColumnTest column_test = 5;
   */
  columnTest?: ColumnTest;
};

/**
 * Describes the message quary.service.v1.AddColumnTestToModelOrSourceColumnRequest.
 * Use `create(AddColumnTestToModelOrSourceColumnRequestSchema)` to create a new message.
 */
export const AddColumnTestToModelOrSourceColumnRequestSchema: GenMessage<AddColumnTestToModelOrSourceColumnRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 36);

/**
 * @generated from message quary.service.v1.AddColumnTestToModelOrSourceColumnResponse
 */
export type AddColumnTestToModelOrSourceColumnResponse = Message<"quary.service.v1.AddColumnTestToModelOrSourceColumnResponse"> & {
};

/**
 * Describes the message quary.service.v1.AddColumnTestToModelOrSourceColumnResponse.
 * Use `create(AddColumnTestToModelOrSourceColumnResponseSchema)` to create a new message.
 */
export const AddColumnTestToModelOrSourceColumnResponseSchema: GenMessage<AddColumnTestToModelOrSourceColumnResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 37);

/**
 * @generated from message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnRequest
 */
export type RemoveColumnTestFromModelOrSourceColumnRequest = Message<"quary.service.v1.RemoveColumnTestFromModelOrSourceColumnRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName: string;

  /**
   * @generated from field: string column_name = 4;
   */
  columnName: string;

  /**
   * @generated from field: quary.service.v1.ColumnTest column_test = 5;
   */
  columnTest?: ColumnTest;
};

/**
 * Describes the message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnRequest.
 * Use `create(RemoveColumnTestFromModelOrSourceColumnRequestSchema)` to create a new message.
 */
export const RemoveColumnTestFromModelOrSourceColumnRequestSchema: GenMessage<RemoveColumnTestFromModelOrSourceColumnRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 38);

/**
 * @generated from message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnResponse
 */
export type RemoveColumnTestFromModelOrSourceColumnResponse = Message<"quary.service.v1.RemoveColumnTestFromModelOrSourceColumnResponse"> & {
};

/**
 * Describes the message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnResponse.
 * Use `create(RemoveColumnTestFromModelOrSourceColumnResponseSchema)` to create a new message.
 */
export const RemoveColumnTestFromModelOrSourceColumnResponseSchema: GenMessage<RemoveColumnTestFromModelOrSourceColumnResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 39);

/**
 * @generated from message quary.service.v1.GenerateSourceFilesRequest
 */
export type GenerateSourceFilesRequest = Message<"quary.service.v1.GenerateSourceFilesRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: repeated quary.service.v1.DatabaseSource sources = 3;
   */
  sources: DatabaseSource[];

  /**
   * folder_path is the path to the folder where the source files will be generated.
   *
   * @generated from field: string folder_path = 4;
   */
  folderPath: string;
};

/**
 * Describes the message quary.service.v1.GenerateSourceFilesRequest.
 * Use `create(GenerateSourceFilesRequestSchema)` to create a new message.
 */
export const GenerateSourceFilesRequestSchema: GenMessage<GenerateSourceFilesRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 40);

/**
 * @generated from message quary.service.v1.GenerateSourceFilesResponse
 */
export type GenerateSourceFilesResponse = Message<"quary.service.v1.GenerateSourceFilesResponse"> & {
};

/**
 * Describes the message quary.service.v1.GenerateSourceFilesResponse.
 * Use `create(GenerateSourceFilesResponseSchema)` to create a new message.
 */
export const GenerateSourceFilesResponseSchema: GenMessage<GenerateSourceFilesResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 41);

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLRequest
 */
export type ReturnDefinitionLocationsForSQLRequest = Message<"quary.service.v1.ReturnDefinitionLocationsForSQLRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string sql = 3;
   */
  sql: string;
};

/**
 * Describes the message quary.service.v1.ReturnDefinitionLocationsForSQLRequest.
 * Use `create(ReturnDefinitionLocationsForSQLRequestSchema)` to create a new message.
 */
export const ReturnDefinitionLocationsForSQLRequestSchema: GenMessage<ReturnDefinitionLocationsForSQLRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 42);

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLResponse
 */
export type ReturnDefinitionLocationsForSQLResponse = Message<"quary.service.v1.ReturnDefinitionLocationsForSQLResponse"> & {
  /**
   * @generated from field: repeated quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition definitions = 1;
   */
  definitions: ReturnDefinitionLocationsForSQLResponse_Definition[];
};

/**
 * Describes the message quary.service.v1.ReturnDefinitionLocationsForSQLResponse.
 * Use `create(ReturnDefinitionLocationsForSQLResponseSchema)` to create a new message.
 */
export const ReturnDefinitionLocationsForSQLResponseSchema: GenMessage<ReturnDefinitionLocationsForSQLResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 43);

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition
 */
export type ReturnDefinitionLocationsForSQLResponse_Definition = Message<"quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition"> & {
  /**
   * @generated from field: quary.service.v1.Range range = 1;
   */
  range?: Range;

  /**
   * @generated from field: string target_model = 2;
   */
  targetModel: string;

  /**
   * @generated from field: string target_file = 3;
   */
  targetFile: string;
};

/**
 * Describes the message quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition.
 * Use `create(ReturnDefinitionLocationsForSQLResponse_DefinitionSchema)` to create a new message.
 */
export const ReturnDefinitionLocationsForSQLResponse_DefinitionSchema: GenMessage<ReturnDefinitionLocationsForSQLResponse_Definition> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 43, 0);

/**
 * @generated from message quary.service.v1.ReturnSQLForInjectedModelRequest
 */
export type ReturnSQLForInjectedModelRequest = Message<"quary.service.v1.ReturnSQLForInjectedModelRequest"> & {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot: string;

  /**
   * @generated from field: string sql = 2;
   */
  sql: string;

  /**
   * temporary_id is the unique identifier for the artificially created model in the file system.
   * It is manually parsed in the function and serves as a temporary ID (model name) for the model.
   * It must be distinct from any other model names in the project to avoid collisions.
   *
   * @generated from field: string temporary_id = 3;
   */
  temporaryId: string;
};

/**
 * Describes the message quary.service.v1.ReturnSQLForInjectedModelRequest.
 * Use `create(ReturnSQLForInjectedModelRequestSchema)` to create a new message.
 */
export const ReturnSQLForInjectedModelRequestSchema: GenMessage<ReturnSQLForInjectedModelRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 44);

/**
 * @generated from message quary.service.v1.ReturnSQLForInjectedModelResponse
 */
export type ReturnSQLForInjectedModelResponse = Message<"quary.service.v1.ReturnSQLForInjectedModelResponse"> & {
  /**
   * @generated from field: string sql = 1;
   */
  sql: string;
};

/**
 * Describes the message quary.service.v1.ReturnSQLForInjectedModelResponse.
 * Use `create(ReturnSQLForInjectedModelResponseSchema)` to create a new message.
 */
export const ReturnSQLForInjectedModelResponseSchema: GenMessage<ReturnSQLForInjectedModelResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 45);

/**
 * @generated from message quary.service.v1.CreateModelChartFileRequest
 */
export type CreateModelChartFileRequest = Message<"quary.service.v1.CreateModelChartFileRequest"> & {
  /**
   * @generated from field: string model_name = 2;
   */
  modelName: string;

  /**
   * @generated from field: google.protobuf.Struct config = 3;
   */
  config?: JsonObject;
};

/**
 * Describes the message quary.service.v1.CreateModelChartFileRequest.
 * Use `create(CreateModelChartFileRequestSchema)` to create a new message.
 */
export const CreateModelChartFileRequestSchema: GenMessage<CreateModelChartFileRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 46);

/**
 * @generated from message quary.service.v1.CreateModelChartFileResponse
 */
export type CreateModelChartFileResponse = Message<"quary.service.v1.CreateModelChartFileResponse"> & {
  /**
   * @generated from field: string chart_file = 1;
   */
  chartFile: string;
};

/**
 * Describes the message quary.service.v1.CreateModelChartFileResponse.
 * Use `create(CreateModelChartFileResponseSchema)` to create a new message.
 */
export const CreateModelChartFileResponseSchema: GenMessage<CreateModelChartFileResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 47);

/**
 * TODO Implement caching
 *
 * @generated from message quary.service.v1.ReturnDashboardWithSqlRequest
 */
export type ReturnDashboardWithSqlRequest = Message<"quary.service.v1.ReturnDashboardWithSqlRequest"> & {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot: string;

  /**
   * @generated from field: string dashboard_name = 3;
   */
  dashboardName: string;
};

/**
 * Describes the message quary.service.v1.ReturnDashboardWithSqlRequest.
 * Use `create(ReturnDashboardWithSqlRequestSchema)` to create a new message.
 */
export const ReturnDashboardWithSqlRequestSchema: GenMessage<ReturnDashboardWithSqlRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 48);

/**
 * @generated from message quary.service.v1.ReturnDashboardWithSqlResponse
 */
export type ReturnDashboardWithSqlResponse = Message<"quary.service.v1.ReturnDashboardWithSqlResponse"> & {
  /**
   * @generated from field: quary.service.v1.Dashboard dashboard = 1;
   */
  dashboard?: Dashboard;

  /**
   * item sql is the sql for each item in the dashboard in the same order as in the dashboard
   *
   * @generated from field: repeated quary.service.v1.DashboardRenderingItem items = 2;
   */
  items: DashboardRenderingItem[];
};

/**
 * Describes the message quary.service.v1.ReturnDashboardWithSqlResponse.
 * Use `create(ReturnDashboardWithSqlResponseSchema)` to create a new message.
 */
export const ReturnDashboardWithSqlResponseSchema: GenMessage<ReturnDashboardWithSqlResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 49);

/**
 * @generated from message quary.service.v1.DashboardRenderingItem
 */
export type DashboardRenderingItem = Message<"quary.service.v1.DashboardRenderingItem"> & {
  /**
   * @generated from field: quary.service.v1.DashboardItem item = 1;
   */
  item?: DashboardItem;

  /**
   * @generated from field: string sql = 2;
   */
  sql: string;

  /**
   * @generated from field: quary.service.v1.Chart chart = 3;
   */
  chart?: Chart;
};

/**
 * Describes the message quary.service.v1.DashboardRenderingItem.
 * Use `create(DashboardRenderingItemSchema)` to create a new message.
 */
export const DashboardRenderingItemSchema: GenMessage<DashboardRenderingItem> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 50);

/**
 * @generated from message quary.service.v1.RemoveObjectColumnRequest
 */
export type RemoveObjectColumnRequest = Message<"quary.service.v1.RemoveObjectColumnRequest"> & {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot: string;

  /**
   * @generated from field: string object = 2;
   */
  object: string;

  /**
   * @generated from field: string column = 3;
   */
  column: string;
};

/**
 * Describes the message quary.service.v1.RemoveObjectColumnRequest.
 * Use `create(RemoveObjectColumnRequestSchema)` to create a new message.
 */
export const RemoveObjectColumnRequestSchema: GenMessage<RemoveObjectColumnRequest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 51);

/**
 * @generated from message quary.service.v1.RemoveObjectColumnResponse
 */
export type RemoveObjectColumnResponse = Message<"quary.service.v1.RemoveObjectColumnResponse"> & {
};

/**
 * Describes the message quary.service.v1.RemoveObjectColumnResponse.
 * Use `create(RemoveObjectColumnResponseSchema)` to create a new message.
 */
export const RemoveObjectColumnResponseSchema: GenMessage<RemoveObjectColumnResponse> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_wasm_rust_rpc_calls, 52);

/**
 * RustWithoutDatabaseService is the service that is used and where the database is not used and so not passed in as a
 * parameter in.
 *
 * @generated from service quary.service.v1.RustWithoutDatabaseService
 */
export const RustWithoutDatabaseService: GenService<{
  /**
   * GetProjectConfig returns the config from quary.yaml
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.GetProjectConfig
   */
  getProjectConfig: {
    methodKind: "unary";
    input: typeof GetProjectConfigRequestSchema;
    output: typeof GetProjectConfigResponseSchema;
  },
  /**
   * InitFiles returns the init files to start off a project.
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.InitFiles
   */
  initFiles: {
    methodKind: "unary";
    input: typeof InitFilesRequestSchema;
    output: typeof InitFilesResponseSchema;
  },
  /**
   * ListFiles returns the list of files in the project, bar ignored files.
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.IsPathEmpty
   */
  isPathEmpty: {
    methodKind: "unary";
    input: typeof IsPathEmptyRequestSchema;
    output: typeof IsPathEmptyResponseSchema;
  },
  /**
   * StringifyProjectFile returns the stringified version of the given project file.
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.StringifyProjectFile
   */
  stringifyProjectFile: {
    methodKind: "unary";
    input: typeof StringifyProjectFileRequestSchema;
    output: typeof StringifyProjectFileResponseSchema;
  },
  /**
   * GenerateProjectFiles generates the project files after onboarding. This includes the project file, and some other
   * ancillary files for set up like .gitignore, github actions, and some folders.
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.GenerateProjectFiles
   */
  generateProjectFiles: {
    methodKind: "unary";
    input: typeof GenerateProjectFilesRequestSchema;
    output: typeof GenerateProjectFilesResponseSchema;
  },
  /**
   * CreateModelChartFile returns the yaml file for the chart for the given model with the given chart settings
   *
   * @generated from rpc quary.service.v1.RustWithoutDatabaseService.CreateModelChartFile
   */
  createModelChartFile: {
    methodKind: "unary";
    input: typeof CreateModelChartFileRequestSchema;
    output: typeof CreateModelChartFileResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_quary_service_v1_wasm_rust_rpc_calls, 0);

/**
 * RustServiceWithDatabase is the service that is used and where the database is used and so passed in as a parameter in
 * the rpc calls
 *
 * @generated from service quary.service.v1.RustWithDatabaseService
 */
export const RustWithDatabaseService: GenService<{
  /**
   * ListAssets returns a list of model, seeds, sources & snapshots
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ListAssets
   */
  listAssets: {
    methodKind: "unary";
    input: typeof ListAssetsRequestSchema;
    output: typeof ListAssetsResponseSchema;
  },
  /**
   * ParseProject returns the project for the given project file.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ParseProject
   */
  parseProject: {
    methodKind: "unary";
    input: typeof ParseProjectRequestSchema;
    output: typeof ParseProjectResponseSchema;
  },
  /**
   * RenderSchema renderSchema returns the sql to create the views for the seeds and the models but without any data
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.RenderSchema
   */
  renderSchema: {
    methodKind: "unary";
    input: typeof RenderSchemaRequestSchema;
    output: typeof RenderSchemaResponseSchema;
  },
  /**
   * ReturnDataForDocView returns the data for the doc view for the given asset. It also includes the dag and columns
   * and descriptions as well. At the moment it is a wrapper of ReturnFullSqlForAsset but we are moving towards making
   * the extension "dumber" and so this will be the only way to get the data for the doc view and more logic will move
   * WASM.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnDataForDocView
   */
  returnDataForDocView: {
    methodKind: "unary";
    input: typeof ReturnDataForDocViewRequestSchema;
    output: typeof ReturnDataForDocViewResponseSchema;
  },
  /**
   * ReturnFullSqlForAsset returns the sql to create the view for the given asset. It also returns the dag and the
   * columns as well as the description for the asset.
   * This currently works for models, sources and snapshots.
   * TODO Implement working for charts
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnFullSqlForAsset
   */
  returnFullSqlForAsset: {
    methodKind: "unary";
    input: typeof ReturnFullSqlForAssetRequestSchema;
    output: typeof ReturnFullSqlForAssetResponseSchema;
  },
  /**
   * ReturnFullProjectDag returns the dag for the full project. Manually Excludes tests from the dag response.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnFullProjectDag
   */
  returnFullProjectDag: {
    methodKind: "unary";
    input: typeof ReturnFullProjectDagRequestSchema;
    output: typeof ReturnFullProjectDagResponseSchema;
  },
  /**
   * ReturnSQLForSeedsAndModels returns sql to create tables for the seeds and views for the models.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnSQLForSeedsAndModels
   */
  returnSQLForSeedsAndModels: {
    methodKind: "unary";
    input: typeof ReturnSQLForSeedsAndModelsRequestSchema;
    output: typeof ReturnSQLForSeedsAndModelsResponseSchema;
  },
  /**
   * ReturnSQLForInjectedModel returns the sql select statement that isn't part of the project yet but you want to
   * inject into the project to get the sql out for it.
   * TODO Implement caching
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnSQLForInjectedModel
   */
  returnSQLForInjectedModel: {
    methodKind: "unary";
    input: typeof ReturnSQLForInjectedModelRequestSchema;
    output: typeof ReturnSQLForInjectedModelResponseSchema;
  },
  /**
   * GetModelTableDetails returns the details of the model table. It can also return details for a source.
   *
   * If there is no schema entry this returns an error.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.GetModelTable
   */
  getModelTable: {
    methodKind: "unary";
    input: typeof GetModelTableRequestSchema;
    output: typeof GetModelTableResponseSchema;
  },
  /**
   * CreateModelSchemaEntry creates a schema entry for the given model. If the model already has a schema entry this returns nothing.
   * By default the schema entry is created with the name of the model and no description.
   * The schema is put inside the file schema.yaml in the same folder as the model's sql definition.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.CreateModelSchemaEntry
   */
  createModelSchemaEntry: {
    methodKind: "unary";
    input: typeof CreateModelSchemaEntryRequestSchema;
    output: typeof CreateModelSchemaEntryResponseSchema;
  },
  /**
   * UpdateAssetDescription updates the description for the given model, source or snapshot.
   * If the model or source cannot be found, UpdateAssetDescription essentially calls CreateModelSchemaEntry and
   * adds the description to the schema entry.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.UpdateAssetDescription
   */
  updateAssetDescription: {
    methodKind: "unary";
    input: typeof UpdateAssetDescriptionRequestSchema;
    output: typeof UpdateAssetDescriptionResponseSchema;
  },
  /**
   * AddColumnToModelOrSource adds a column to the given model schema definition. If the column already exists, this
   * returns nothing.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.AddColumnToModelOrSource
   */
  addColumnToModelOrSource: {
    methodKind: "unary";
    input: typeof AddColumnToModelOrSourceRequestSchema;
    output: typeof AddColumnToModelOrSourceResponseSchema;
  },
  /**
   * RemoveObjectColumn removes the given model column from a specified model or source.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.RemoveObjectColumn
   */
  removeObjectColumn: {
    methodKind: "unary";
    input: typeof RemoveObjectColumnRequestSchema;
    output: typeof RemoveObjectColumnResponseSchema;
  },
  /**
   * UpdateModelOrSourceColumnDescription sets the description for the given column. If the column, model, source definition doesn't
   * exist, this calls AddColumnToModelOrSource and then adds the description.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.UpdateModelOrSourceColumnDescription
   */
  updateModelOrSourceColumnDescription: {
    methodKind: "unary";
    input: typeof UpdateModelOrSourceColumnDescriptionRequestSchema;
    output: typeof UpdateModelOrSourceColumnDescriptionResponseSchema;
  },
  /**
   * AddColumnTestToModelOrSourceColumn adds a column test to the given column. If the column test already exists, this
   * returns nothing. If no entry exists for the column, this creates it.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.AddColumnTestToModelOrSourceColumn
   */
  addColumnTestToModelOrSourceColumn: {
    methodKind: "unary";
    input: typeof AddColumnTestToModelOrSourceColumnRequestSchema;
    output: typeof AddColumnTestToModelOrSourceColumnResponseSchema;
  },
  /**
   * RemoveColumnTestFromModelOrSourceColumn removes a column test for a given column by finding a matching the full column test.
   * If the column test does not exist, this returns nothing. If an entry exists for the column, this removes it.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.RemoveColumnTestFromModelOrSourceColumn
   */
  removeColumnTestFromModelOrSourceColumn: {
    methodKind: "unary";
    input: typeof RemoveColumnTestFromModelOrSourceColumnRequestSchema;
    output: typeof RemoveColumnTestFromModelOrSourceColumnResponseSchema;
  },
  /**
   * GenerateSourceFiles generates the source files for the given project that have been selected in an import flow.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.GenerateSourceFiles
   */
  generateSourceFiles: {
    methodKind: "unary";
    input: typeof GenerateSourceFilesRequestSchema;
    output: typeof GenerateSourceFilesResponseSchema;
  },
  /**
   * ReturnDefinitionLocationsForSQL takes in a SQL statement, looks for the models it references and returns location of those
   * definitions in the file as well as the file path for the definition.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnDefinitionLocationsForSQL
   */
  returnDefinitionLocationsForSQL: {
    methodKind: "unary";
    input: typeof ReturnDefinitionLocationsForSQLRequestSchema;
    output: typeof ReturnDefinitionLocationsForSQLResponseSchema;
  },
  /**
   * ReturnDashboardWithSql returns the components for the dashboard for the given dashboard name. It also returns the sql
   * for each item in the dashboard.
   *
   * @generated from rpc quary.service.v1.RustWithDatabaseService.ReturnDashboardWithSql
   */
  returnDashboardWithSql: {
    methodKind: "unary";
    input: typeof ReturnDashboardWithSqlRequestSchema;
    output: typeof ReturnDashboardWithSqlResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_quary_service_v1_wasm_rust_rpc_calls, 1);

