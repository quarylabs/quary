// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file quary/service/v1/wasm_rust_rpc_calls.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { ConnectionConfig } from "./connection_config_pb.js";
import { ColumnTest, ProjectFile } from "./project_file_pb.js";
import { Project } from "./project_pb.js";
import { ProjectDag } from "./project_dag_pb.js";
import { ColumnDescription } from "./column_description_pb.js";
import { Table } from "./table_pb.js";
import { DatabaseSource } from "./types_pb.js";
import { Range } from "./range_pb.js";

/**
 * @generated from message quary.service.v1.GetProjectConfigRequest
 */
export class GetProjectConfigRequest extends Message<GetProjectConfigRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<GetProjectConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GetProjectConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectConfigRequest {
    return new GetProjectConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectConfigRequest {
    return new GetProjectConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectConfigRequest {
    return new GetProjectConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectConfigRequest | PlainMessage<GetProjectConfigRequest> | undefined, b: GetProjectConfigRequest | PlainMessage<GetProjectConfigRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectConfigRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GetProjectConfigResponse
 */
export class GetProjectConfigResponse extends Message<GetProjectConfigResponse> {
  /**
   * @generated from field: quary.service.v1.ConnectionConfig connection_config = 1;
   */
  connectionConfig?: ConnectionConfig;

  constructor(data?: PartialMessage<GetProjectConfigResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GetProjectConfigResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_config", kind: "message", T: ConnectionConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectConfigResponse {
    return new GetProjectConfigResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectConfigResponse {
    return new GetProjectConfigResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectConfigResponse {
    return new GetProjectConfigResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectConfigResponse | PlainMessage<GetProjectConfigResponse> | undefined, b: GetProjectConfigResponse | PlainMessage<GetProjectConfigResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectConfigResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.InitFilesRequest
 */
export class InitFilesRequest extends Message<InitFilesRequest> {
  constructor(data?: PartialMessage<InitFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.InitFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitFilesRequest {
    return new InitFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitFilesRequest {
    return new InitFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitFilesRequest {
    return new InitFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: InitFilesRequest | PlainMessage<InitFilesRequest> | undefined, b: InitFilesRequest | PlainMessage<InitFilesRequest> | undefined): boolean {
    return proto3.util.equals(InitFilesRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.InitFilesResponse
 */
export class InitFilesResponse extends Message<InitFilesResponse> {
  constructor(data?: PartialMessage<InitFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.InitFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitFilesResponse {
    return new InitFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitFilesResponse {
    return new InitFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitFilesResponse {
    return new InitFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: InitFilesResponse | PlainMessage<InitFilesResponse> | undefined, b: InitFilesResponse | PlainMessage<InitFilesResponse> | undefined): boolean {
    return proto3.util.equals(InitFilesResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.IsPathEmptyRequest
 */
export class IsPathEmptyRequest extends Message<IsPathEmptyRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<IsPathEmptyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.IsPathEmptyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsPathEmptyRequest {
    return new IsPathEmptyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsPathEmptyRequest {
    return new IsPathEmptyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsPathEmptyRequest {
    return new IsPathEmptyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IsPathEmptyRequest | PlainMessage<IsPathEmptyRequest> | undefined, b: IsPathEmptyRequest | PlainMessage<IsPathEmptyRequest> | undefined): boolean {
    return proto3.util.equals(IsPathEmptyRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.IsPathEmptyResponse
 */
export class IsPathEmptyResponse extends Message<IsPathEmptyResponse> {
  /**
   * @generated from field: bool is_empty = 1;
   */
  isEmpty = false;

  constructor(data?: PartialMessage<IsPathEmptyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.IsPathEmptyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsPathEmptyResponse {
    return new IsPathEmptyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsPathEmptyResponse {
    return new IsPathEmptyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsPathEmptyResponse {
    return new IsPathEmptyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IsPathEmptyResponse | PlainMessage<IsPathEmptyResponse> | undefined, b: IsPathEmptyResponse | PlainMessage<IsPathEmptyResponse> | undefined): boolean {
    return proto3.util.equals(IsPathEmptyResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GenerateProjectFilesRequest
 */
export class GenerateProjectFilesRequest extends Message<GenerateProjectFilesRequest> {
  /**
   * @generated from field: quary.service.v1.ConnectionConfig connection_config = 1;
   */
  connectionConfig?: ConnectionConfig;

  constructor(data?: PartialMessage<GenerateProjectFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GenerateProjectFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connection_config", kind: "message", T: ConnectionConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateProjectFilesRequest {
    return new GenerateProjectFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateProjectFilesRequest {
    return new GenerateProjectFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateProjectFilesRequest {
    return new GenerateProjectFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateProjectFilesRequest | PlainMessage<GenerateProjectFilesRequest> | undefined, b: GenerateProjectFilesRequest | PlainMessage<GenerateProjectFilesRequest> | undefined): boolean {
    return proto3.util.equals(GenerateProjectFilesRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GenerateProjectFilesResponse
 */
export class GenerateProjectFilesResponse extends Message<GenerateProjectFilesResponse> {
  constructor(data?: PartialMessage<GenerateProjectFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GenerateProjectFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateProjectFilesResponse {
    return new GenerateProjectFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateProjectFilesResponse {
    return new GenerateProjectFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateProjectFilesResponse {
    return new GenerateProjectFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateProjectFilesResponse | PlainMessage<GenerateProjectFilesResponse> | undefined, b: GenerateProjectFilesResponse | PlainMessage<GenerateProjectFilesResponse> | undefined): boolean {
    return proto3.util.equals(GenerateProjectFilesResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.StringifyProjectFileRequest
 */
export class StringifyProjectFileRequest extends Message<StringifyProjectFileRequest> {
  /**
   * @generated from field: quary.service.v1.ProjectFile project_file = 1;
   */
  projectFile?: ProjectFile;

  constructor(data?: PartialMessage<StringifyProjectFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.StringifyProjectFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_file", kind: "message", T: ProjectFile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringifyProjectFileRequest {
    return new StringifyProjectFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringifyProjectFileRequest {
    return new StringifyProjectFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringifyProjectFileRequest {
    return new StringifyProjectFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StringifyProjectFileRequest | PlainMessage<StringifyProjectFileRequest> | undefined, b: StringifyProjectFileRequest | PlainMessage<StringifyProjectFileRequest> | undefined): boolean {
    return proto3.util.equals(StringifyProjectFileRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.StringifyProjectFileResponse
 */
export class StringifyProjectFileResponse extends Message<StringifyProjectFileResponse> {
  /**
   * @generated from field: string stringified_project_file = 1;
   */
  stringifiedProjectFile = "";

  constructor(data?: PartialMessage<StringifyProjectFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.StringifyProjectFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stringified_project_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringifyProjectFileResponse {
    return new StringifyProjectFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringifyProjectFileResponse {
    return new StringifyProjectFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringifyProjectFileResponse {
    return new StringifyProjectFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StringifyProjectFileResponse | PlainMessage<StringifyProjectFileResponse> | undefined, b: StringifyProjectFileResponse | PlainMessage<StringifyProjectFileResponse> | undefined): boolean {
    return proto3.util.equals(StringifyProjectFileResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ListAssetsRequest
 */
export class ListAssetsRequest extends Message<ListAssetsRequest> {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<ListAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ListAssetsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssetsRequest {
    return new ListAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAssetsRequest | PlainMessage<ListAssetsRequest> | undefined, b: ListAssetsRequest | PlainMessage<ListAssetsRequest> | undefined): boolean {
    return proto3.util.equals(ListAssetsRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ListAssetsResponse
 */
export class ListAssetsResponse extends Message<ListAssetsResponse> {
  /**
   * @generated from field: repeated quary.service.v1.ListAssetsResponse.Asset assets = 1;
   */
  assets: ListAssetsResponse_Asset[] = [];

  constructor(data?: PartialMessage<ListAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ListAssetsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "assets", kind: "message", T: ListAssetsResponse_Asset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssetsResponse {
    return new ListAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssetsResponse {
    return new ListAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssetsResponse {
    return new ListAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAssetsResponse | PlainMessage<ListAssetsResponse> | undefined, b: ListAssetsResponse | PlainMessage<ListAssetsResponse> | undefined): boolean {
    return proto3.util.equals(ListAssetsResponse, a, b);
  }
}

/**
 * TODO This asset type should probably be refactored to just use the core types.
 *
 * @generated from message quary.service.v1.ListAssetsResponse.Asset
 */
export class ListAssetsResponse_Asset extends Message<ListAssetsResponse_Asset> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  /**
   * @generated from field: quary.service.v1.ListAssetsResponse.Asset.AssetType asset_type = 3;
   */
  assetType = ListAssetsResponse_Asset_AssetType.UNSPECIFIED;

  /**
   * @generated from field: string file_path = 4;
   */
  filePath = "";

  constructor(data?: PartialMessage<ListAssetsResponse_Asset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ListAssetsResponse.Asset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "asset_type", kind: "enum", T: proto3.getEnumType(ListAssetsResponse_Asset_AssetType) },
    { no: 4, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAssetsResponse_Asset {
    return new ListAssetsResponse_Asset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAssetsResponse_Asset {
    return new ListAssetsResponse_Asset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAssetsResponse_Asset {
    return new ListAssetsResponse_Asset().fromJsonString(jsonString, options);
  }

  static equals(a: ListAssetsResponse_Asset | PlainMessage<ListAssetsResponse_Asset> | undefined, b: ListAssetsResponse_Asset | PlainMessage<ListAssetsResponse_Asset> | undefined): boolean {
    return proto3.util.equals(ListAssetsResponse_Asset, a, b);
  }
}

/**
 * @generated from enum quary.service.v1.ListAssetsResponse.Asset.AssetType
 */
export enum ListAssetsResponse_Asset_AssetType {
  /**
   * @generated from enum value: ASSET_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ASSET_TYPE_MODEL = 1;
   */
  MODEL = 1,

  /**
   * @generated from enum value: ASSET_TYPE_SEED = 2;
   */
  SEED = 2,

  /**
   * @generated from enum value: ASSET_TYPE_SOURCE = 3;
   */
  SOURCE = 3,

  /**
   * @generated from enum value: ASSET_TYPE_SNAPSHOT = 4;
   */
  SNAPSHOT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ListAssetsResponse_Asset_AssetType)
proto3.util.setEnumType(ListAssetsResponse_Asset_AssetType, "quary.service.v1.ListAssetsResponse.Asset.AssetType", [
  { no: 0, name: "ASSET_TYPE_UNSPECIFIED" },
  { no: 1, name: "ASSET_TYPE_MODEL" },
  { no: 2, name: "ASSET_TYPE_SEED" },
  { no: 3, name: "ASSET_TYPE_SOURCE" },
  { no: 4, name: "ASSET_TYPE_SNAPSHOT" },
]);

/**
 * @generated from message quary.service.v1.ParseProjectRequest
 */
export class ParseProjectRequest extends Message<ParseProjectRequest> {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<ParseProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ParseProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseProjectRequest {
    return new ParseProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseProjectRequest {
    return new ParseProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseProjectRequest {
    return new ParseProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParseProjectRequest | PlainMessage<ParseProjectRequest> | undefined, b: ParseProjectRequest | PlainMessage<ParseProjectRequest> | undefined): boolean {
    return proto3.util.equals(ParseProjectRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ParseProjectResponse
 */
export class ParseProjectResponse extends Message<ParseProjectResponse> {
  /**
   * @generated from field: quary.service.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<ParseProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ParseProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseProjectResponse {
    return new ParseProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseProjectResponse {
    return new ParseProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseProjectResponse {
    return new ParseProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParseProjectResponse | PlainMessage<ParseProjectResponse> | undefined, b: ParseProjectResponse | PlainMessage<ParseProjectResponse> | undefined): boolean {
    return proto3.util.equals(ParseProjectResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.RenderSchemaRequest
 */
export class RenderSchemaRequest extends Message<RenderSchemaRequest> {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<RenderSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.RenderSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderSchemaRequest {
    return new RenderSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderSchemaRequest {
    return new RenderSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderSchemaRequest {
    return new RenderSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenderSchemaRequest | PlainMessage<RenderSchemaRequest> | undefined, b: RenderSchemaRequest | PlainMessage<RenderSchemaRequest> | undefined): boolean {
    return proto3.util.equals(RenderSchemaRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.RenderSchemaResponse
 */
export class RenderSchemaResponse extends Message<RenderSchemaResponse> {
  /**
   * @generated from field: string schema = 1;
   */
  schema = "";

  constructor(data?: PartialMessage<RenderSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.RenderSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderSchemaResponse {
    return new RenderSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderSchemaResponse {
    return new RenderSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderSchemaResponse {
    return new RenderSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenderSchemaResponse | PlainMessage<RenderSchemaResponse> | undefined, b: RenderSchemaResponse | PlainMessage<RenderSchemaResponse> | undefined): boolean {
    return proto3.util.equals(RenderSchemaResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnSQLForSeedsAndModelsRequest
 */
export class ReturnSQLForSeedsAndModelsRequest extends Message<ReturnSQLForSeedsAndModelsRequest> {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot = "";

  /**
   * @generated from field: string db_qualifier = 4;
   */
  dbQualifier = "";

  constructor(data?: PartialMessage<ReturnSQLForSeedsAndModelsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnSQLForSeedsAndModelsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "db_qualifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnSQLForSeedsAndModelsRequest {
    return new ReturnSQLForSeedsAndModelsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnSQLForSeedsAndModelsRequest {
    return new ReturnSQLForSeedsAndModelsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnSQLForSeedsAndModelsRequest {
    return new ReturnSQLForSeedsAndModelsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnSQLForSeedsAndModelsRequest | PlainMessage<ReturnSQLForSeedsAndModelsRequest> | undefined, b: ReturnSQLForSeedsAndModelsRequest | PlainMessage<ReturnSQLForSeedsAndModelsRequest> | undefined): boolean {
    return proto3.util.equals(ReturnSQLForSeedsAndModelsRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnSQLForSeedsAndModelsResponse
 */
export class ReturnSQLForSeedsAndModelsResponse extends Message<ReturnSQLForSeedsAndModelsResponse> {
  /**
   * @generated from field: repeated string sql = 1;
   */
  sql: string[] = [];

  /**
   * @generated from field: quary.service.v1.Project project = 2;
   */
  project?: Project;

  constructor(data?: PartialMessage<ReturnSQLForSeedsAndModelsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnSQLForSeedsAndModelsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnSQLForSeedsAndModelsResponse {
    return new ReturnSQLForSeedsAndModelsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnSQLForSeedsAndModelsResponse {
    return new ReturnSQLForSeedsAndModelsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnSQLForSeedsAndModelsResponse {
    return new ReturnSQLForSeedsAndModelsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnSQLForSeedsAndModelsResponse | PlainMessage<ReturnSQLForSeedsAndModelsResponse> | undefined, b: ReturnSQLForSeedsAndModelsResponse | PlainMessage<ReturnSQLForSeedsAndModelsResponse> | undefined): boolean {
    return proto3.util.equals(ReturnSQLForSeedsAndModelsResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnFullProjectDagRequest
 */
export class ReturnFullProjectDagRequest extends Message<ReturnFullProjectDagRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  constructor(data?: PartialMessage<ReturnFullProjectDagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnFullProjectDagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnFullProjectDagRequest {
    return new ReturnFullProjectDagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnFullProjectDagRequest {
    return new ReturnFullProjectDagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnFullProjectDagRequest {
    return new ReturnFullProjectDagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnFullProjectDagRequest | PlainMessage<ReturnFullProjectDagRequest> | undefined, b: ReturnFullProjectDagRequest | PlainMessage<ReturnFullProjectDagRequest> | undefined): boolean {
    return proto3.util.equals(ReturnFullProjectDagRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnFullProjectDagResponse
 */
export class ReturnFullProjectDagResponse extends Message<ReturnFullProjectDagResponse> {
  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 1;
   */
  dag?: ProjectDag;

  constructor(data?: PartialMessage<ReturnFullProjectDagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnFullProjectDagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dag", kind: "message", T: ProjectDag },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnFullProjectDagResponse {
    return new ReturnFullProjectDagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnFullProjectDagResponse {
    return new ReturnFullProjectDagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnFullProjectDagResponse {
    return new ReturnFullProjectDagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnFullProjectDagResponse | PlainMessage<ReturnFullProjectDagResponse> | undefined, b: ReturnFullProjectDagResponse | PlainMessage<ReturnFullProjectDagResponse> | undefined): boolean {
    return proto3.util.equals(ReturnFullProjectDagResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnDataForDocViewRequest
 */
export class ReturnDataForDocViewRequest extends Message<ReturnDataForDocViewRequest> {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot = "";

  /**
   * @generated from field: string asset_name = 2;
   */
  assetName = "";

  /**
   * cache_view defines whether or not to use the cached views in the returned sql and dag.
   *
   * @generated from field: quary.service.v1.CacheViewInformation cache_view_information = 3;
   */
  cacheViewInformation?: CacheViewInformation;

  constructor(data?: PartialMessage<ReturnDataForDocViewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnDataForDocViewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cache_view_information", kind: "message", T: CacheViewInformation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnDataForDocViewRequest {
    return new ReturnDataForDocViewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnDataForDocViewRequest {
    return new ReturnDataForDocViewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnDataForDocViewRequest {
    return new ReturnDataForDocViewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnDataForDocViewRequest | PlainMessage<ReturnDataForDocViewRequest> | undefined, b: ReturnDataForDocViewRequest | PlainMessage<ReturnDataForDocViewRequest> | undefined): boolean {
    return proto3.util.equals(ReturnDataForDocViewRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnDataForDocViewResponse
 */
export class ReturnDataForDocViewResponse extends Message<ReturnDataForDocViewResponse> {
  /**
   * @generated from field: string full_sql = 1;
   */
  fullSql = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 3;
   */
  dag?: ProjectDag;

  /**
   * @generated from field: repeated quary.service.v1.ColumnDescription columns = 4;
   */
  columns: ColumnDescription[] = [];

  /**
   * @generated from field: bool is_asset_in_schema_files = 5;
   */
  isAssetInSchemaFiles = false;

  constructor(data?: PartialMessage<ReturnDataForDocViewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnDataForDocViewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "dag", kind: "message", T: ProjectDag },
    { no: 4, name: "columns", kind: "message", T: ColumnDescription, repeated: true },
    { no: 5, name: "is_asset_in_schema_files", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnDataForDocViewResponse {
    return new ReturnDataForDocViewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnDataForDocViewResponse {
    return new ReturnDataForDocViewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnDataForDocViewResponse {
    return new ReturnDataForDocViewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnDataForDocViewResponse | PlainMessage<ReturnDataForDocViewResponse> | undefined, b: ReturnDataForDocViewResponse | PlainMessage<ReturnDataForDocViewResponse> | undefined): boolean {
    return proto3.util.equals(ReturnDataForDocViewResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnFullSqlForAssetRequest
 */
export class ReturnFullSqlForAssetRequest extends Message<ReturnFullSqlForAssetRequest> {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot = "";

  /**
   * @generated from field: string asset_name = 2;
   */
  assetName = "";

  /**
   * cache_view defines whether or not to use the cached views in the returned sql and dag.
   *
   * @generated from field: quary.service.v1.CacheViewInformation cache_view_information = 3;
   */
  cacheViewInformation?: CacheViewInformation;

  constructor(data?: PartialMessage<ReturnFullSqlForAssetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnFullSqlForAssetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "asset_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "cache_view_information", kind: "message", T: CacheViewInformation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnFullSqlForAssetRequest {
    return new ReturnFullSqlForAssetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnFullSqlForAssetRequest {
    return new ReturnFullSqlForAssetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnFullSqlForAssetRequest {
    return new ReturnFullSqlForAssetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnFullSqlForAssetRequest | PlainMessage<ReturnFullSqlForAssetRequest> | undefined, b: ReturnFullSqlForAssetRequest | PlainMessage<ReturnFullSqlForAssetRequest> | undefined): boolean {
    return proto3.util.equals(ReturnFullSqlForAssetRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.CacheViewInformation
 */
export class CacheViewInformation extends Message<CacheViewInformation> {
  /**
   * @generated from oneof quary.service.v1.CacheViewInformation.cache_view
   */
  cacheView: {
    /**
     * @generated from field: quary.service.v1.CacheViewInformationPaths cache_view_information = 1;
     */
    value: CacheViewInformationPaths;
    case: "cacheViewInformation";
  } | {
    /**
     * @generated from field: google.protobuf.Empty do_not_use = 2;
     */
    value: Empty;
    case: "doNotUse";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CacheViewInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.CacheViewInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cache_view_information", kind: "message", T: CacheViewInformationPaths, oneof: "cache_view" },
    { no: 2, name: "do_not_use", kind: "message", T: Empty, oneof: "cache_view" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CacheViewInformation {
    return new CacheViewInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CacheViewInformation {
    return new CacheViewInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CacheViewInformation {
    return new CacheViewInformation().fromJsonString(jsonString, options);
  }

  static equals(a: CacheViewInformation | PlainMessage<CacheViewInformation> | undefined, b: CacheViewInformation | PlainMessage<CacheViewInformation> | undefined): boolean {
    return proto3.util.equals(CacheViewInformation, a, b);
  }
}

/**
 * @generated from message quary.service.v1.CacheViewInformationPaths
 */
export class CacheViewInformationPaths extends Message<CacheViewInformationPaths> {
  /**
   * @generated from field: repeated string cache_view_paths = 1;
   */
  cacheViewPaths: string[] = [];

  constructor(data?: PartialMessage<CacheViewInformationPaths>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.CacheViewInformationPaths";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cache_view_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CacheViewInformationPaths {
    return new CacheViewInformationPaths().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CacheViewInformationPaths {
    return new CacheViewInformationPaths().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CacheViewInformationPaths {
    return new CacheViewInformationPaths().fromJsonString(jsonString, options);
  }

  static equals(a: CacheViewInformationPaths | PlainMessage<CacheViewInformationPaths> | undefined, b: CacheViewInformationPaths | PlainMessage<CacheViewInformationPaths> | undefined): boolean {
    return proto3.util.equals(CacheViewInformationPaths, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnFullSqlForAssetResponse
 */
export class ReturnFullSqlForAssetResponse extends Message<ReturnFullSqlForAssetResponse> {
  /**
   * @generated from field: string full_sql = 1;
   */
  fullSql = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: quary.service.v1.ProjectDag dag = 3;
   */
  dag?: ProjectDag;

  /**
   * @generated from field: repeated quary.service.v1.ColumnDescription columns = 4;
   */
  columns: ColumnDescription[] = [];

  constructor(data?: PartialMessage<ReturnFullSqlForAssetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnFullSqlForAssetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "full_sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "dag", kind: "message", T: ProjectDag },
    { no: 4, name: "columns", kind: "message", T: ColumnDescription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnFullSqlForAssetResponse {
    return new ReturnFullSqlForAssetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnFullSqlForAssetResponse {
    return new ReturnFullSqlForAssetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnFullSqlForAssetResponse {
    return new ReturnFullSqlForAssetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnFullSqlForAssetResponse | PlainMessage<ReturnFullSqlForAssetResponse> | undefined, b: ReturnFullSqlForAssetResponse | PlainMessage<ReturnFullSqlForAssetResponse> | undefined): boolean {
    return proto3.util.equals(ReturnFullSqlForAssetResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GetModelTableRequest
 */
export class GetModelTableRequest extends Message<GetModelTableRequest> {
  /**
   * @generated from field: string project_root = 3;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_name = 4;
   */
  modelName = "";

  constructor(data?: PartialMessage<GetModelTableRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GetModelTableRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelTableRequest {
    return new GetModelTableRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelTableRequest {
    return new GetModelTableRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelTableRequest {
    return new GetModelTableRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelTableRequest | PlainMessage<GetModelTableRequest> | undefined, b: GetModelTableRequest | PlainMessage<GetModelTableRequest> | undefined): boolean {
    return proto3.util.equals(GetModelTableRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GetModelTableResponse
 */
export class GetModelTableResponse extends Message<GetModelTableResponse> {
  /**
   * @generated from field: quary.service.v1.Table table = 2;
   */
  table?: Table;

  constructor(data?: PartialMessage<GetModelTableResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GetModelTableResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "table", kind: "message", T: Table },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetModelTableResponse {
    return new GetModelTableResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetModelTableResponse {
    return new GetModelTableResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetModelTableResponse {
    return new GetModelTableResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetModelTableResponse | PlainMessage<GetModelTableResponse> | undefined, b: GetModelTableResponse | PlainMessage<GetModelTableResponse> | undefined): boolean {
    return proto3.util.equals(GetModelTableResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.CreateModelSchemaEntryRequest
 */
export class CreateModelSchemaEntryRequest extends Message<CreateModelSchemaEntryRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_name = 3;
   */
  modelName = "";

  constructor(data?: PartialMessage<CreateModelSchemaEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.CreateModelSchemaEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModelSchemaEntryRequest {
    return new CreateModelSchemaEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModelSchemaEntryRequest {
    return new CreateModelSchemaEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModelSchemaEntryRequest {
    return new CreateModelSchemaEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModelSchemaEntryRequest | PlainMessage<CreateModelSchemaEntryRequest> | undefined, b: CreateModelSchemaEntryRequest | PlainMessage<CreateModelSchemaEntryRequest> | undefined): boolean {
    return proto3.util.equals(CreateModelSchemaEntryRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.CreateModelSchemaEntryResponse
 */
export class CreateModelSchemaEntryResponse extends Message<CreateModelSchemaEntryResponse> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: quary.service.v1.ProjectFile project_file = 2;
   */
  projectFile?: ProjectFile;

  constructor(data?: PartialMessage<CreateModelSchemaEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.CreateModelSchemaEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_file", kind: "message", T: ProjectFile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateModelSchemaEntryResponse {
    return new CreateModelSchemaEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateModelSchemaEntryResponse {
    return new CreateModelSchemaEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateModelSchemaEntryResponse {
    return new CreateModelSchemaEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateModelSchemaEntryResponse | PlainMessage<CreateModelSchemaEntryResponse> | undefined, b: CreateModelSchemaEntryResponse | PlainMessage<CreateModelSchemaEntryResponse> | undefined): boolean {
    return proto3.util.equals(CreateModelSchemaEntryResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.UpdateAssetDescriptionRequest
 */
export class UpdateAssetDescriptionRequest extends Message<UpdateAssetDescriptionRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string asset_name = 3;
   */
  assetName = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<UpdateAssetDescriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.UpdateAssetDescriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "asset_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAssetDescriptionRequest {
    return new UpdateAssetDescriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAssetDescriptionRequest {
    return new UpdateAssetDescriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAssetDescriptionRequest {
    return new UpdateAssetDescriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAssetDescriptionRequest | PlainMessage<UpdateAssetDescriptionRequest> | undefined, b: UpdateAssetDescriptionRequest | PlainMessage<UpdateAssetDescriptionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAssetDescriptionRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.UpdateAssetDescriptionResponse
 */
export class UpdateAssetDescriptionResponse extends Message<UpdateAssetDescriptionResponse> {
  constructor(data?: PartialMessage<UpdateAssetDescriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.UpdateAssetDescriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAssetDescriptionResponse {
    return new UpdateAssetDescriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAssetDescriptionResponse {
    return new UpdateAssetDescriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAssetDescriptionResponse {
    return new UpdateAssetDescriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAssetDescriptionResponse | PlainMessage<UpdateAssetDescriptionResponse> | undefined, b: UpdateAssetDescriptionResponse | PlainMessage<UpdateAssetDescriptionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateAssetDescriptionResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.AddColumnToModelOrSourceRequest
 */
export class AddColumnToModelOrSourceRequest extends Message<AddColumnToModelOrSourceRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName = "";

  /**
   * @generated from field: string column_name = 4;
   */
  columnName = "";

  constructor(data?: PartialMessage<AddColumnToModelOrSourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.AddColumnToModelOrSourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_or_source_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddColumnToModelOrSourceRequest {
    return new AddColumnToModelOrSourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddColumnToModelOrSourceRequest {
    return new AddColumnToModelOrSourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddColumnToModelOrSourceRequest {
    return new AddColumnToModelOrSourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddColumnToModelOrSourceRequest | PlainMessage<AddColumnToModelOrSourceRequest> | undefined, b: AddColumnToModelOrSourceRequest | PlainMessage<AddColumnToModelOrSourceRequest> | undefined): boolean {
    return proto3.util.equals(AddColumnToModelOrSourceRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.AddColumnToModelOrSourceResponse
 */
export class AddColumnToModelOrSourceResponse extends Message<AddColumnToModelOrSourceResponse> {
  constructor(data?: PartialMessage<AddColumnToModelOrSourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.AddColumnToModelOrSourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddColumnToModelOrSourceResponse {
    return new AddColumnToModelOrSourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddColumnToModelOrSourceResponse {
    return new AddColumnToModelOrSourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddColumnToModelOrSourceResponse {
    return new AddColumnToModelOrSourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddColumnToModelOrSourceResponse | PlainMessage<AddColumnToModelOrSourceResponse> | undefined, b: AddColumnToModelOrSourceResponse | PlainMessage<AddColumnToModelOrSourceResponse> | undefined): boolean {
    return proto3.util.equals(AddColumnToModelOrSourceResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.UpdateModelOrSourceColumnDescriptionRequest
 */
export class UpdateModelOrSourceColumnDescriptionRequest extends Message<UpdateModelOrSourceColumnDescriptionRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName = "";

  /**
   * @generated from field: string column_name = 4;
   */
  columnName = "";

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  constructor(data?: PartialMessage<UpdateModelOrSourceColumnDescriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.UpdateModelOrSourceColumnDescriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_or_source_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateModelOrSourceColumnDescriptionRequest {
    return new UpdateModelOrSourceColumnDescriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateModelOrSourceColumnDescriptionRequest {
    return new UpdateModelOrSourceColumnDescriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateModelOrSourceColumnDescriptionRequest {
    return new UpdateModelOrSourceColumnDescriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateModelOrSourceColumnDescriptionRequest | PlainMessage<UpdateModelOrSourceColumnDescriptionRequest> | undefined, b: UpdateModelOrSourceColumnDescriptionRequest | PlainMessage<UpdateModelOrSourceColumnDescriptionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateModelOrSourceColumnDescriptionRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.UpdateModelOrSourceColumnDescriptionResponse
 */
export class UpdateModelOrSourceColumnDescriptionResponse extends Message<UpdateModelOrSourceColumnDescriptionResponse> {
  constructor(data?: PartialMessage<UpdateModelOrSourceColumnDescriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.UpdateModelOrSourceColumnDescriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateModelOrSourceColumnDescriptionResponse {
    return new UpdateModelOrSourceColumnDescriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateModelOrSourceColumnDescriptionResponse {
    return new UpdateModelOrSourceColumnDescriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateModelOrSourceColumnDescriptionResponse {
    return new UpdateModelOrSourceColumnDescriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateModelOrSourceColumnDescriptionResponse | PlainMessage<UpdateModelOrSourceColumnDescriptionResponse> | undefined, b: UpdateModelOrSourceColumnDescriptionResponse | PlainMessage<UpdateModelOrSourceColumnDescriptionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateModelOrSourceColumnDescriptionResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.AddColumnTestToModelOrSourceColumnRequest
 */
export class AddColumnTestToModelOrSourceColumnRequest extends Message<AddColumnTestToModelOrSourceColumnRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName = "";

  /**
   * @generated from field: string column_name = 4;
   */
  columnName = "";

  /**
   * @generated from field: quary.service.v1.ColumnTest column_test = 5;
   */
  columnTest?: ColumnTest;

  constructor(data?: PartialMessage<AddColumnTestToModelOrSourceColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.AddColumnTestToModelOrSourceColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_or_source_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "column_test", kind: "message", T: ColumnTest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddColumnTestToModelOrSourceColumnRequest {
    return new AddColumnTestToModelOrSourceColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddColumnTestToModelOrSourceColumnRequest {
    return new AddColumnTestToModelOrSourceColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddColumnTestToModelOrSourceColumnRequest {
    return new AddColumnTestToModelOrSourceColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddColumnTestToModelOrSourceColumnRequest | PlainMessage<AddColumnTestToModelOrSourceColumnRequest> | undefined, b: AddColumnTestToModelOrSourceColumnRequest | PlainMessage<AddColumnTestToModelOrSourceColumnRequest> | undefined): boolean {
    return proto3.util.equals(AddColumnTestToModelOrSourceColumnRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.AddColumnTestToModelOrSourceColumnResponse
 */
export class AddColumnTestToModelOrSourceColumnResponse extends Message<AddColumnTestToModelOrSourceColumnResponse> {
  constructor(data?: PartialMessage<AddColumnTestToModelOrSourceColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.AddColumnTestToModelOrSourceColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddColumnTestToModelOrSourceColumnResponse {
    return new AddColumnTestToModelOrSourceColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddColumnTestToModelOrSourceColumnResponse {
    return new AddColumnTestToModelOrSourceColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddColumnTestToModelOrSourceColumnResponse {
    return new AddColumnTestToModelOrSourceColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddColumnTestToModelOrSourceColumnResponse | PlainMessage<AddColumnTestToModelOrSourceColumnResponse> | undefined, b: AddColumnTestToModelOrSourceColumnResponse | PlainMessage<AddColumnTestToModelOrSourceColumnResponse> | undefined): boolean {
    return proto3.util.equals(AddColumnTestToModelOrSourceColumnResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnRequest
 */
export class RemoveColumnTestFromModelOrSourceColumnRequest extends Message<RemoveColumnTestFromModelOrSourceColumnRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string model_or_source_name = 3;
   */
  modelOrSourceName = "";

  /**
   * @generated from field: string column_name = 4;
   */
  columnName = "";

  /**
   * @generated from field: quary.service.v1.ColumnTest column_test = 5;
   */
  columnTest?: ColumnTest;

  constructor(data?: PartialMessage<RemoveColumnTestFromModelOrSourceColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.RemoveColumnTestFromModelOrSourceColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "model_or_source_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "column_test", kind: "message", T: ColumnTest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveColumnTestFromModelOrSourceColumnRequest {
    return new RemoveColumnTestFromModelOrSourceColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveColumnTestFromModelOrSourceColumnRequest {
    return new RemoveColumnTestFromModelOrSourceColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveColumnTestFromModelOrSourceColumnRequest {
    return new RemoveColumnTestFromModelOrSourceColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveColumnTestFromModelOrSourceColumnRequest | PlainMessage<RemoveColumnTestFromModelOrSourceColumnRequest> | undefined, b: RemoveColumnTestFromModelOrSourceColumnRequest | PlainMessage<RemoveColumnTestFromModelOrSourceColumnRequest> | undefined): boolean {
    return proto3.util.equals(RemoveColumnTestFromModelOrSourceColumnRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.RemoveColumnTestFromModelOrSourceColumnResponse
 */
export class RemoveColumnTestFromModelOrSourceColumnResponse extends Message<RemoveColumnTestFromModelOrSourceColumnResponse> {
  constructor(data?: PartialMessage<RemoveColumnTestFromModelOrSourceColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.RemoveColumnTestFromModelOrSourceColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveColumnTestFromModelOrSourceColumnResponse {
    return new RemoveColumnTestFromModelOrSourceColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveColumnTestFromModelOrSourceColumnResponse {
    return new RemoveColumnTestFromModelOrSourceColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveColumnTestFromModelOrSourceColumnResponse {
    return new RemoveColumnTestFromModelOrSourceColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveColumnTestFromModelOrSourceColumnResponse | PlainMessage<RemoveColumnTestFromModelOrSourceColumnResponse> | undefined, b: RemoveColumnTestFromModelOrSourceColumnResponse | PlainMessage<RemoveColumnTestFromModelOrSourceColumnResponse> | undefined): boolean {
    return proto3.util.equals(RemoveColumnTestFromModelOrSourceColumnResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GenerateSourceFilesRequest
 */
export class GenerateSourceFilesRequest extends Message<GenerateSourceFilesRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: repeated quary.service.v1.DatabaseSource sources = 3;
   */
  sources: DatabaseSource[] = [];

  /**
   * folder_path is the path to the folder where the source files will be generated.
   *
   * @generated from field: string folder_path = 4;
   */
  folderPath = "";

  constructor(data?: PartialMessage<GenerateSourceFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GenerateSourceFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sources", kind: "message", T: DatabaseSource, repeated: true },
    { no: 4, name: "folder_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateSourceFilesRequest {
    return new GenerateSourceFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateSourceFilesRequest {
    return new GenerateSourceFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateSourceFilesRequest {
    return new GenerateSourceFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateSourceFilesRequest | PlainMessage<GenerateSourceFilesRequest> | undefined, b: GenerateSourceFilesRequest | PlainMessage<GenerateSourceFilesRequest> | undefined): boolean {
    return proto3.util.equals(GenerateSourceFilesRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.GenerateSourceFilesResponse
 */
export class GenerateSourceFilesResponse extends Message<GenerateSourceFilesResponse> {
  constructor(data?: PartialMessage<GenerateSourceFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.GenerateSourceFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateSourceFilesResponse {
    return new GenerateSourceFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateSourceFilesResponse {
    return new GenerateSourceFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateSourceFilesResponse {
    return new GenerateSourceFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateSourceFilesResponse | PlainMessage<GenerateSourceFilesResponse> | undefined, b: GenerateSourceFilesResponse | PlainMessage<GenerateSourceFilesResponse> | undefined): boolean {
    return proto3.util.equals(GenerateSourceFilesResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLRequest
 */
export class ReturnDefinitionLocationsForSQLRequest extends Message<ReturnDefinitionLocationsForSQLRequest> {
  /**
   * @generated from field: string project_root = 2;
   */
  projectRoot = "";

  /**
   * @generated from field: string sql = 3;
   */
  sql = "";

  constructor(data?: PartialMessage<ReturnDefinitionLocationsForSQLRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnDefinitionLocationsForSQLRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnDefinitionLocationsForSQLRequest {
    return new ReturnDefinitionLocationsForSQLRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLRequest {
    return new ReturnDefinitionLocationsForSQLRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLRequest {
    return new ReturnDefinitionLocationsForSQLRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnDefinitionLocationsForSQLRequest | PlainMessage<ReturnDefinitionLocationsForSQLRequest> | undefined, b: ReturnDefinitionLocationsForSQLRequest | PlainMessage<ReturnDefinitionLocationsForSQLRequest> | undefined): boolean {
    return proto3.util.equals(ReturnDefinitionLocationsForSQLRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLResponse
 */
export class ReturnDefinitionLocationsForSQLResponse extends Message<ReturnDefinitionLocationsForSQLResponse> {
  /**
   * @generated from field: repeated quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition definitions = 1;
   */
  definitions: ReturnDefinitionLocationsForSQLResponse_Definition[] = [];

  constructor(data?: PartialMessage<ReturnDefinitionLocationsForSQLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnDefinitionLocationsForSQLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "definitions", kind: "message", T: ReturnDefinitionLocationsForSQLResponse_Definition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnDefinitionLocationsForSQLResponse {
    return new ReturnDefinitionLocationsForSQLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLResponse {
    return new ReturnDefinitionLocationsForSQLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLResponse {
    return new ReturnDefinitionLocationsForSQLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnDefinitionLocationsForSQLResponse | PlainMessage<ReturnDefinitionLocationsForSQLResponse> | undefined, b: ReturnDefinitionLocationsForSQLResponse | PlainMessage<ReturnDefinitionLocationsForSQLResponse> | undefined): boolean {
    return proto3.util.equals(ReturnDefinitionLocationsForSQLResponse, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition
 */
export class ReturnDefinitionLocationsForSQLResponse_Definition extends Message<ReturnDefinitionLocationsForSQLResponse_Definition> {
  /**
   * @generated from field: quary.service.v1.Range range = 1;
   */
  range?: Range;

  /**
   * @generated from field: string target_model = 2;
   */
  targetModel = "";

  /**
   * @generated from field: string target_file = 3;
   */
  targetFile = "";

  constructor(data?: PartialMessage<ReturnDefinitionLocationsForSQLResponse_Definition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnDefinitionLocationsForSQLResponse.Definition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: Range },
    { no: 2, name: "target_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "target_file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnDefinitionLocationsForSQLResponse_Definition {
    return new ReturnDefinitionLocationsForSQLResponse_Definition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLResponse_Definition {
    return new ReturnDefinitionLocationsForSQLResponse_Definition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnDefinitionLocationsForSQLResponse_Definition {
    return new ReturnDefinitionLocationsForSQLResponse_Definition().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnDefinitionLocationsForSQLResponse_Definition | PlainMessage<ReturnDefinitionLocationsForSQLResponse_Definition> | undefined, b: ReturnDefinitionLocationsForSQLResponse_Definition | PlainMessage<ReturnDefinitionLocationsForSQLResponse_Definition> | undefined): boolean {
    return proto3.util.equals(ReturnDefinitionLocationsForSQLResponse_Definition, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnSQLForInjectedModelRequest
 */
export class ReturnSQLForInjectedModelRequest extends Message<ReturnSQLForInjectedModelRequest> {
  /**
   * @generated from field: string project_root = 1;
   */
  projectRoot = "";

  /**
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * temporary_id is the unique identifier for the artificially created model in the file system.
   * It is manually parsed in the function and serves as a temporary ID (model name) for the model.
   * It must be distinct from any other model names in the project to avoid collisions.
   *
   * @generated from field: string temporary_id = 3;
   */
  temporaryId = "";

  constructor(data?: PartialMessage<ReturnSQLForInjectedModelRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnSQLForInjectedModelRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "temporary_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnSQLForInjectedModelRequest {
    return new ReturnSQLForInjectedModelRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnSQLForInjectedModelRequest {
    return new ReturnSQLForInjectedModelRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnSQLForInjectedModelRequest {
    return new ReturnSQLForInjectedModelRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnSQLForInjectedModelRequest | PlainMessage<ReturnSQLForInjectedModelRequest> | undefined, b: ReturnSQLForInjectedModelRequest | PlainMessage<ReturnSQLForInjectedModelRequest> | undefined): boolean {
    return proto3.util.equals(ReturnSQLForInjectedModelRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ReturnSQLForInjectedModelResponse
 */
export class ReturnSQLForInjectedModelResponse extends Message<ReturnSQLForInjectedModelResponse> {
  /**
   * @generated from field: string sql = 1;
   */
  sql = "";

  constructor(data?: PartialMessage<ReturnSQLForInjectedModelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ReturnSQLForInjectedModelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReturnSQLForInjectedModelResponse {
    return new ReturnSQLForInjectedModelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReturnSQLForInjectedModelResponse {
    return new ReturnSQLForInjectedModelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReturnSQLForInjectedModelResponse {
    return new ReturnSQLForInjectedModelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReturnSQLForInjectedModelResponse | PlainMessage<ReturnSQLForInjectedModelResponse> | undefined, b: ReturnSQLForInjectedModelResponse | PlainMessage<ReturnSQLForInjectedModelResponse> | undefined): boolean {
    return proto3.util.equals(ReturnSQLForInjectedModelResponse, a, b);
  }
}

