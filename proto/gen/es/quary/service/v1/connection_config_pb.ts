// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file quary/service/v1/connection_config.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message quary.service.v1.Var
 */
export class Var extends Message<Var> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<Var>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Var";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Var {
    return new Var().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Var {
    return new Var().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Var {
    return new Var().fromJsonString(jsonString, options);
  }

  static equals(a: Var | PlainMessage<Var> | undefined, b: Var | PlainMessage<Var> | undefined): boolean {
    return proto3.util.equals(Var, a, b);
  }
}

/**
 * Configuration describes the configuration of the project.
 *
 * @generated from message quary.service.v1.ConnectionConfig
 */
export class ConnectionConfig extends Message<ConnectionConfig> {
  /**
   * @generated from oneof quary.service.v1.ConnectionConfig.config
   */
  config: {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigDuckDB duckdb = 1;
     */
    value: ConnectionConfig_ConnectionConfigDuckDB;
    case: "duckdb";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigDuckDBInMemory duckdb_in_memory = 2;
     */
    value: ConnectionConfig_ConnectionConfigDuckDBInMemory;
    case: "duckdbInMemory";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigSqLite sqlite = 3;
     */
    value: ConnectionConfig_ConnectionConfigSqLite;
    case: "sqlite";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigSqLiteInMemory sqlite_in_memory = 4;
     */
    value: ConnectionConfig_ConnectionConfigSqLiteInMemory;
    case: "sqliteInMemory";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigBigQuery big_query = 5;
     */
    value: ConnectionConfig_ConnectionConfigBigQuery;
    case: "bigQuery";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigSnowflake snowflake = 6;
     */
    value: ConnectionConfig_ConnectionConfigSnowflake;
    case: "snowflake";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigPostgres postgres = 7;
     */
    value: ConnectionConfig_ConnectionConfigPostgres;
    case: "postgres";
  } | {
    /**
     * @generated from field: quary.service.v1.ConnectionConfig.ConnectionConfigRedshift redshift = 9;
     */
    value: ConnectionConfig_ConnectionConfigRedshift;
    case: "redshift";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: repeated quary.service.v1.Var vars = 8;
   */
  vars: Var[] = [];

  constructor(data?: PartialMessage<ConnectionConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "duckdb", kind: "message", T: ConnectionConfig_ConnectionConfigDuckDB, oneof: "config" },
    { no: 2, name: "duckdb_in_memory", kind: "message", T: ConnectionConfig_ConnectionConfigDuckDBInMemory, oneof: "config" },
    { no: 3, name: "sqlite", kind: "message", T: ConnectionConfig_ConnectionConfigSqLite, oneof: "config" },
    { no: 4, name: "sqlite_in_memory", kind: "message", T: ConnectionConfig_ConnectionConfigSqLiteInMemory, oneof: "config" },
    { no: 5, name: "big_query", kind: "message", T: ConnectionConfig_ConnectionConfigBigQuery, oneof: "config" },
    { no: 6, name: "snowflake", kind: "message", T: ConnectionConfig_ConnectionConfigSnowflake, oneof: "config" },
    { no: 7, name: "postgres", kind: "message", T: ConnectionConfig_ConnectionConfigPostgres, oneof: "config" },
    { no: 9, name: "redshift", kind: "message", T: ConnectionConfig_ConnectionConfigRedshift, oneof: "config" },
    { no: 8, name: "vars", kind: "message", T: Var, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig {
    return new ConnectionConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig {
    return new ConnectionConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig {
    return new ConnectionConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig | PlainMessage<ConnectionConfig> | undefined, b: ConnectionConfig | PlainMessage<ConnectionConfig> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigSqLite
 */
export class ConnectionConfig_ConnectionConfigSqLite extends Message<ConnectionConfig_ConnectionConfigSqLite> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigSqLite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigSqLite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigSqLite {
    return new ConnectionConfig_ConnectionConfigSqLite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSqLite {
    return new ConnectionConfig_ConnectionConfigSqLite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSqLite {
    return new ConnectionConfig_ConnectionConfigSqLite().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigSqLite | PlainMessage<ConnectionConfig_ConnectionConfigSqLite> | undefined, b: ConnectionConfig_ConnectionConfigSqLite | PlainMessage<ConnectionConfig_ConnectionConfigSqLite> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigSqLite, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigSqLiteInMemory
 */
export class ConnectionConfig_ConnectionConfigSqLiteInMemory extends Message<ConnectionConfig_ConnectionConfigSqLiteInMemory> {
  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigSqLiteInMemory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigSqLiteInMemory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigSqLiteInMemory {
    return new ConnectionConfig_ConnectionConfigSqLiteInMemory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSqLiteInMemory {
    return new ConnectionConfig_ConnectionConfigSqLiteInMemory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSqLiteInMemory {
    return new ConnectionConfig_ConnectionConfigSqLiteInMemory().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigSqLiteInMemory | PlainMessage<ConnectionConfig_ConnectionConfigSqLiteInMemory> | undefined, b: ConnectionConfig_ConnectionConfigSqLiteInMemory | PlainMessage<ConnectionConfig_ConnectionConfigSqLiteInMemory> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigSqLiteInMemory, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigDuckDB
 */
export class ConnectionConfig_ConnectionConfigDuckDB extends Message<ConnectionConfig_ConnectionConfigDuckDB> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: optional string schema = 2;
   */
  schema?: string;

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigDuckDB>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigDuckDB";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigDuckDB {
    return new ConnectionConfig_ConnectionConfigDuckDB().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigDuckDB {
    return new ConnectionConfig_ConnectionConfigDuckDB().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigDuckDB {
    return new ConnectionConfig_ConnectionConfigDuckDB().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigDuckDB | PlainMessage<ConnectionConfig_ConnectionConfigDuckDB> | undefined, b: ConnectionConfig_ConnectionConfigDuckDB | PlainMessage<ConnectionConfig_ConnectionConfigDuckDB> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigDuckDB, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigDuckDBInMemory
 */
export class ConnectionConfig_ConnectionConfigDuckDBInMemory extends Message<ConnectionConfig_ConnectionConfigDuckDBInMemory> {
  /**
   * @generated from field: optional string schema = 1;
   */
  schema?: string;

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigDuckDBInMemory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigDuckDBInMemory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigDuckDBInMemory {
    return new ConnectionConfig_ConnectionConfigDuckDBInMemory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigDuckDBInMemory {
    return new ConnectionConfig_ConnectionConfigDuckDBInMemory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigDuckDBInMemory {
    return new ConnectionConfig_ConnectionConfigDuckDBInMemory().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigDuckDBInMemory | PlainMessage<ConnectionConfig_ConnectionConfigDuckDBInMemory> | undefined, b: ConnectionConfig_ConnectionConfigDuckDBInMemory | PlainMessage<ConnectionConfig_ConnectionConfigDuckDBInMemory> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigDuckDBInMemory, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigPostgres
 */
export class ConnectionConfig_ConnectionConfigPostgres extends Message<ConnectionConfig_ConnectionConfigPostgres> {
  /**
   * @generated from field: string schema = 1;
   */
  schema = "";

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigPostgres>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigPostgres";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigPostgres {
    return new ConnectionConfig_ConnectionConfigPostgres().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigPostgres {
    return new ConnectionConfig_ConnectionConfigPostgres().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigPostgres {
    return new ConnectionConfig_ConnectionConfigPostgres().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigPostgres | PlainMessage<ConnectionConfig_ConnectionConfigPostgres> | undefined, b: ConnectionConfig_ConnectionConfigPostgres | PlainMessage<ConnectionConfig_ConnectionConfigPostgres> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigPostgres, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigRedshift
 */
export class ConnectionConfig_ConnectionConfigRedshift extends Message<ConnectionConfig_ConnectionConfigRedshift> {
  /**
   * @generated from field: string schema = 1;
   */
  schema = "";

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigRedshift>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigRedshift";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigRedshift {
    return new ConnectionConfig_ConnectionConfigRedshift().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigRedshift {
    return new ConnectionConfig_ConnectionConfigRedshift().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigRedshift {
    return new ConnectionConfig_ConnectionConfigRedshift().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigRedshift | PlainMessage<ConnectionConfig_ConnectionConfigRedshift> | undefined, b: ConnectionConfig_ConnectionConfigRedshift | PlainMessage<ConnectionConfig_ConnectionConfigRedshift> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigRedshift, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigBigQuery
 */
export class ConnectionConfig_ConnectionConfigBigQuery extends Message<ConnectionConfig_ConnectionConfigBigQuery> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigBigQuery>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigBigQuery";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigBigQuery {
    return new ConnectionConfig_ConnectionConfigBigQuery().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigBigQuery {
    return new ConnectionConfig_ConnectionConfigBigQuery().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigBigQuery {
    return new ConnectionConfig_ConnectionConfigBigQuery().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigBigQuery | PlainMessage<ConnectionConfig_ConnectionConfigBigQuery> | undefined, b: ConnectionConfig_ConnectionConfigBigQuery | PlainMessage<ConnectionConfig_ConnectionConfigBigQuery> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigBigQuery, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ConnectionConfig.ConnectionConfigSnowflake
 */
export class ConnectionConfig_ConnectionConfigSnowflake extends Message<ConnectionConfig_ConnectionConfigSnowflake> {
  /**
   * @generated from field: string account_url = 1;
   */
  accountUrl = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret = "";

  /**
   * TODO: think about making optional
   *
   * @generated from field: string role = 4;
   */
  role = "";

  /**
   * @generated from field: string database = 5;
   */
  database = "";

  /**
   * @generated from field: string schema = 6;
   */
  schema = "";

  /**
   * @generated from field: string warehouse = 7;
   */
  warehouse = "";

  constructor(data?: PartialMessage<ConnectionConfig_ConnectionConfigSnowflake>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ConnectionConfig.ConnectionConfigSnowflake";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "warehouse", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectionConfig_ConnectionConfigSnowflake {
    return new ConnectionConfig_ConnectionConfigSnowflake().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSnowflake {
    return new ConnectionConfig_ConnectionConfigSnowflake().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectionConfig_ConnectionConfigSnowflake {
    return new ConnectionConfig_ConnectionConfigSnowflake().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectionConfig_ConnectionConfigSnowflake | PlainMessage<ConnectionConfig_ConnectionConfigSnowflake> | undefined, b: ConnectionConfig_ConnectionConfigSnowflake | PlainMessage<ConnectionConfig_ConnectionConfigSnowflake> | undefined): boolean {
    return proto3.util.equals(ConnectionConfig_ConnectionConfigSnowflake, a, b);
  }
}

