// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file quary/service/v1/test_result.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Empty } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { QueryResult } from "./query_result_pb";
import { file_quary_service_v1_query_result } from "./query_result_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file quary/service/v1/test_result.proto.
 */
export const file_quary_service_v1_test_result: GenFile = /*@__PURE__*/
  fileDesc("CiJxdWFyeS9zZXJ2aWNlL3YxL3Rlc3RfcmVzdWx0LnByb3RvEhBxdWFyeS5zZXJ2aWNlLnYxIpUBCgpUZXN0UmVzdWx0EhEKCXRlc3RfbmFtZRgBIAEoCRINCgVxdWVyeRgCIAEoCRIqCgZwYXNzZWQYAyABKAsyGC5xdWFyeS5zZXJ2aWNlLnYxLlBhc3NlZEgAEioKBmZhaWxlZBgEIAEoCzIYLnF1YXJ5LnNlcnZpY2UudjEuRmFpbGVkSABCDQoLdGVzdF9yZXN1bHQiJwoNSW5mZXJyZWRDaGFpbhIWCg5pbmZlcnJlZF9jaGFpbhgBIAMoCSJHChpJbmZlcnJlZENoYWluV2l0aE9wZXJhdGlvbhIWCg5pbmZlcnJlZF9jaGFpbhgBIAMoCRIRCglvcGVyYXRpb24YAiABKAki8gEKBlBhc3NlZBIlCgNyYW4YASABKAsyFi5nb29nbGUucHJvdG9idWYuRW1wdHlIABI+ChNpbmZlcnJlZF9mcm9tX3Rlc3RzGAIgASgLMh8ucXVhcnkuc2VydmljZS52MS5JbmZlcnJlZENoYWluSAASHQoTaW5mZXJyZWRfZnJvbV9sb2dpYxgDIAEoCUgAElgKIGluZmVycmVkX3Rocm91Z2hfdGVzdHNfb3BlcmF0aW9uGAQgASgLMiwucXVhcnkuc2VydmljZS52MS5JbmZlcnJlZENoYWluV2l0aE9wZXJhdGlvbkgAQggKBnJlYXNvbiKhAgoGRmFpbGVkEjEKA3JhbhgBIAEoCzIiLnF1YXJ5LnNlcnZpY2UudjEuRmFpbGVkUnVuUmVzdWx0c0gAEj4KE2luZmVycmVkX2Zyb21fdGVzdHMYAiABKAsyHy5xdWFyeS5zZXJ2aWNlLnYxLkluZmVycmVkQ2hhaW5IABJYCiBpbmZlcnJlZF90aHJvdWdoX3Rlc3RzX29wZXJhdGlvbhgDIAEoCzIsLnF1YXJ5LnNlcnZpY2UudjEuSW5mZXJyZWRDaGFpbldpdGhPcGVyYXRpb25IABJAChJmYWlsZWRfcnVuX21lc3NhZ2UYBCABKAsyIi5xdWFyeS5zZXJ2aWNlLnYxLkZhaWxlZFJ1bk1lc3NhZ2VIAEIICgZyZWFzb24iRwoQRmFpbGVkUnVuUmVzdWx0cxIzCgxxdWVyeV9yZXN1bHQYASABKAsyHS5xdWFyeS5zZXJ2aWNlLnYxLlF1ZXJ5UmVzdWx0IiMKEEZhaWxlZFJ1bk1lc3NhZ2USDwoHbWVzc2FnZRgBIAEoCUICUAFiBnByb3RvMw", [file_google_protobuf_empty, file_quary_service_v1_query_result]);

/**
 * TestResult is the result of a test serializable so it can be shared
 *
 * @generated from message quary.service.v1.TestResult
 */
export type TestResult = Message<"quary.service.v1.TestResult"> & {
  /**
   * @generated from field: string test_name = 1;
   */
  testName: string;

  /**
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * @generated from oneof quary.service.v1.TestResult.test_result
   */
  testResult: {
    /**
     * @generated from field: quary.service.v1.Passed passed = 3;
     */
    value: Passed;
    case: "passed";
  } | {
    /**
     * @generated from field: quary.service.v1.Failed failed = 4;
     */
    value: Failed;
    case: "failed";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.TestResult.
 * Use `create(TestResultSchema)` to create a new message.
 */
export const TestResultSchema: GenMessage<TestResult> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 0);

/**
 * @generated from message quary.service.v1.InferredChain
 */
export type InferredChain = Message<"quary.service.v1.InferredChain"> & {
  /**
   * @generated from field: repeated string inferred_chain = 1;
   */
  inferredChain: string[];
};

/**
 * Describes the message quary.service.v1.InferredChain.
 * Use `create(InferredChainSchema)` to create a new message.
 */
export const InferredChainSchema: GenMessage<InferredChain> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 1);

/**
 * @generated from message quary.service.v1.InferredChainWithOperation
 */
export type InferredChainWithOperation = Message<"quary.service.v1.InferredChainWithOperation"> & {
  /**
   * @generated from field: repeated string inferred_chain = 1;
   */
  inferredChain: string[];

  /**
   * @generated from field: string operation = 2;
   */
  operation: string;
};

/**
 * Describes the message quary.service.v1.InferredChainWithOperation.
 * Use `create(InferredChainWithOperationSchema)` to create a new message.
 */
export const InferredChainWithOperationSchema: GenMessage<InferredChainWithOperation> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 2);

/**
 * @generated from message quary.service.v1.Passed
 */
export type Passed = Message<"quary.service.v1.Passed"> & {
  /**
   * @generated from oneof quary.service.v1.Passed.reason
   */
  reason: {
    /**
     * @generated from field: google.protobuf.Empty ran = 1;
     */
    value: Empty;
    case: "ran";
  } | {
    /**
     * @generated from field: quary.service.v1.InferredChain inferred_from_tests = 2;
     */
    value: InferredChain;
    case: "inferredFromTests";
  } | {
    /**
     * inferred_from_logic adds a logic string which explains how it is derived
     *
     * @generated from field: string inferred_from_logic = 3;
     */
    value: string;
    case: "inferredFromLogic";
  } | {
    /**
     * inferred_through_tests_operation infers that the test was inferred and implied through the operation
     *
     * @generated from field: quary.service.v1.InferredChainWithOperation inferred_through_tests_operation = 4;
     */
    value: InferredChainWithOperation;
    case: "inferredThroughTestsOperation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.Passed.
 * Use `create(PassedSchema)` to create a new message.
 */
export const PassedSchema: GenMessage<Passed> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 3);

/**
 * @generated from message quary.service.v1.Failed
 */
export type Failed = Message<"quary.service.v1.Failed"> & {
  /**
   * @generated from oneof quary.service.v1.Failed.reason
   */
  reason: {
    /**
     * @generated from field: quary.service.v1.FailedRunResults ran = 1;
     */
    value: FailedRunResults;
    case: "ran";
  } | {
    /**
     * @generated from field: quary.service.v1.InferredChain inferred_from_tests = 2;
     */
    value: InferredChain;
    case: "inferredFromTests";
  } | {
    /**
     * @generated from field: quary.service.v1.InferredChainWithOperation inferred_through_tests_operation = 3;
     */
    value: InferredChainWithOperation;
    case: "inferredThroughTestsOperation";
  } | {
    /**
     * @generated from field: quary.service.v1.FailedRunMessage failed_run_message = 4;
     */
    value: FailedRunMessage;
    case: "failedRunMessage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.Failed.
 * Use `create(FailedSchema)` to create a new message.
 */
export const FailedSchema: GenMessage<Failed> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 4);

/**
 * @generated from message quary.service.v1.FailedRunResults
 */
export type FailedRunResults = Message<"quary.service.v1.FailedRunResults"> & {
  /**
   * @generated from field: quary.service.v1.QueryResult query_result = 1;
   */
  queryResult?: QueryResult;
};

/**
 * Describes the message quary.service.v1.FailedRunResults.
 * Use `create(FailedRunResultsSchema)` to create a new message.
 */
export const FailedRunResultsSchema: GenMessage<FailedRunResults> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 5);

/**
 * FailedRunMessage is a message that contains a message that can be displayed
 * to the user when a test fails. This shoudl be used when the failure is not
 * due to a query result but due to some other reason for example an incorrect
 * query or a query that is not supported.
 *
 * @generated from message quary.service.v1.FailedRunMessage
 */
export type FailedRunMessage = Message<"quary.service.v1.FailedRunMessage"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;
};

/**
 * Describes the message quary.service.v1.FailedRunMessage.
 * Use `create(FailedRunMessageSchema)` to create a new message.
 */
export const FailedRunMessageSchema: GenMessage<FailedRunMessage> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_test_result, 6);

