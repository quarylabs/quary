// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file quary/service/v1/dashboard_file.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message quary.service.v1.DashboardFile
 */
export class DashboardFile extends Message<DashboardFile> {
  /**
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * Tags are used to group different parts of the project together. For example, you could tag all models that are
   * related to a specific department with the same tag.
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[] = [];

  /**
   * @generated from field: repeated quary.service.v1.DashboardItem items = 5;
   */
  items: DashboardItem[] = [];

  constructor(data?: PartialMessage<DashboardFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.DashboardFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "items", kind: "message", T: DashboardItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardFile {
    return new DashboardFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardFile {
    return new DashboardFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardFile {
    return new DashboardFile().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardFile | PlainMessage<DashboardFile> | undefined, b: DashboardFile | PlainMessage<DashboardFile> | undefined): boolean {
    return proto3.util.equals(DashboardFile, a, b);
  }
}

/**
 * @generated from message quary.service.v1.DashboardItem
 */
export class DashboardItem extends Message<DashboardItem> {
  /**
   * @generated from field: uint32 top_left_x = 1;
   */
  topLeftX = 0;

  /**
   * @generated from field: uint32 top_left_y = 2;
   */
  topLeftY = 0;

  /**
   * @generated from field: uint32 width = 3;
   */
  width = 0;

  /**
   * @generated from field: uint32 height = 4;
   */
  height = 0;

  /**
   * @generated from oneof quary.service.v1.DashboardItem.item
   */
  item: {
    /**
     * @generated from field: quary.service.v1.DashboardChart chart = 5;
     */
    value: DashboardChart;
    case: "chart";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DashboardItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.DashboardItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "top_left_x", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "top_left_y", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "width", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "height", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "chart", kind: "message", T: DashboardChart, oneof: "item" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardItem {
    return new DashboardItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardItem {
    return new DashboardItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardItem {
    return new DashboardItem().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardItem | PlainMessage<DashboardItem> | undefined, b: DashboardItem | PlainMessage<DashboardItem> | undefined): boolean {
    return proto3.util.equals(DashboardItem, a, b);
  }
}

/**
 * @generated from message quary.service.v1.DashboardChart
 */
export class DashboardChart extends Message<DashboardChart> {
  /**
   * @generated from oneof quary.service.v1.DashboardChart.chart
   */
  chart: {
    /**
     * @generated from field: quary.service.v1.DashboardChartReference reference = 1;
     */
    value: DashboardChartReference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DashboardChart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.DashboardChart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: DashboardChartReference, oneof: "chart" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardChart {
    return new DashboardChart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardChart {
    return new DashboardChart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardChart {
    return new DashboardChart().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardChart | PlainMessage<DashboardChart> | undefined, b: DashboardChart | PlainMessage<DashboardChart> | undefined): boolean {
    return proto3.util.equals(DashboardChart, a, b);
  }
}

/**
 * @generated from message quary.service.v1.DashboardChartReference
 */
export class DashboardChartReference extends Message<DashboardChartReference> {
  /**
   * @generated from field: string reference = 1;
   */
  reference = "";

  constructor(data?: PartialMessage<DashboardChartReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.DashboardChartReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardChartReference {
    return new DashboardChartReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardChartReference {
    return new DashboardChartReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardChartReference {
    return new DashboardChartReference().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardChartReference | PlainMessage<DashboardChartReference> | undefined, b: DashboardChartReference | PlainMessage<DashboardChartReference> | undefined): boolean {
    return proto3.util.equals(DashboardChartReference, a, b);
  }
}

