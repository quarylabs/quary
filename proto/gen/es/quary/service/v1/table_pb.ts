// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file quary/service/v1/table.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Empty } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { ColumnTest } from "./project_file_pb";
import { file_quary_service_v1_project_file } from "./project_file_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file quary/service/v1/table.proto.
 */
export const file_quary_service_v1_table: GenFile = /*@__PURE__*/
  fileDesc("ChxxdWFyeS9zZXJ2aWNlL3YxL3RhYmxlLnByb3RvEhBxdWFyeS5zZXJ2aWNlLnYxIooECgVUYWJsZRI6CgdwcmVzZW50GAEgASgLMicucXVhcnkuc2VydmljZS52MS5UYWJsZS5QcmVzZW50SW5TY2hlbWFIABJBCgtub3RfcHJlc2VudBgCIAEoCzIqLnF1YXJ5LnNlcnZpY2UudjEuVGFibGUuTm90UHJlc2VudEluU2NoZW1hSAAauAIKD1ByZXNlbnRJblNjaGVtYRJACgRyb3dzGAEgAygLMjIucXVhcnkuc2VydmljZS52MS5UYWJsZS5QcmVzZW50SW5TY2hlbWEuUHJlc2VudFJvdxriAQoKUHJlc2VudFJvdxI/Ch5wcmVzZW50X2luX3NxbF9hbmRfZGVmaW5pdGlvbnMYASABKAsyFS5xdWFyeS5zZXJ2aWNlLnYxLlJvd0gAEjcKFm1pc3NpbmdfaW5fZGVmaW5pdGlvbnMYAiABKAsyFS5xdWFyeS5zZXJ2aWNlLnYxLlJvd0gAElMKMnByZXNlbnRfaW5fZGVmaW5pdGlvbnNfYnV0X25vdF9yZWNvZ25pc2FibGVfaW5fc3FsGAMgASgLMhUucXVhcnkuc2VydmljZS52MS5Sb3dIAEIFCgNyb3caOQoSTm90UHJlc2VudEluU2NoZW1hEiMKBHJvd3MYASADKAsyFS5xdWFyeS5zZXJ2aWNlLnYxLlJvd0IMCgp0YWJsZV90eXBlInUKA1JvdxINCgV0aXRsZRgBIAEoCRIoCgV0ZXN0cxgCIAMoCzIZLnF1YXJ5LnNlcnZpY2UudjEuUm93VGVzdBI1CgtkZXNjcmlwdGlvbhgDIAEoCzIgLnF1YXJ5LnNlcnZpY2UudjEuUm93RGVzY3JpcHRpb24i3wEKB1Jvd1Rlc3QSRAoYcHJlc2VudF9hbmRfbm90X2luZmVycmVkGAEgASgLMiAucXVhcnkuc2VydmljZS52MS5Sb3dUZXN0RGV0YWlsc0gAEkAKFHByZXNlbnRfYW5kX2luZmVycmVkGAIgASgLMiAucXVhcnkuc2VydmljZS52MS5Sb3dUZXN0RGV0YWlsc0gAEkQKGG5vdF9wcmVzZW50X2J1dF9pbmZlcnJlZBgDIAEoCzIgLnF1YXJ5LnNlcnZpY2UudjEuUm93VGVzdERldGFpbHNIAEIGCgR0ZXN0IlEKDlJvd1Rlc3REZXRhaWxzEgwKBHRleHQYASABKAkSMQoLY29sdW1uX3Rlc3QYAiABKAsyHC5xdWFyeS5zZXJ2aWNlLnYxLkNvbHVtblRlc3QivQIKDlJvd0Rlc2NyaXB0aW9uEhEKB3ByZXNlbnQYASABKAlIABIoCh5wcmVzZW50X2FuZF9pbmZlcnJlZF9pZGVudGljYWwYAiABKAlIABJhCiBwcmVzZW50X3dpdGhfZGlmZmVyZW50X2luZmVyZW5jZRgDIAEoCzI1LnF1YXJ5LnNlcnZpY2UudjEuUm93RGVzY3JpcHRpb24uUHJlc2VudFdpdGhJbmZlcmVuY2VIABISCghpbmZlcnJlZBgEIAEoCUgAEi0KC25vdF9wcmVzZW50GAUgASgLMhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5SAAaOQoUUHJlc2VudFdpdGhJbmZlcmVuY2USDwoHcHJlc2VudBgBIAEoCRIQCghpbmZlcnJlZBgCIAEoCUINCgtkZXNjcmlwdGlvbkICUAFiBnByb3RvMw", [file_google_protobuf_empty, file_quary_service_v1_project_file]);

/**
 * Table is a table in the project that is used to visualise columns, descriptions, and column tests.
 *
 * @generated from message quary.service.v1.Table
 */
export type Table = Message<"quary.service.v1.Table"> & {
  /**
   * @generated from oneof quary.service.v1.Table.table_type
   */
  tableType: {
    /**
     * @generated from field: quary.service.v1.Table.PresentInSchema present = 1;
     */
    value: Table_PresentInSchema;
    case: "present";
  } | {
    /**
     * @generated from field: quary.service.v1.Table.NotPresentInSchema not_present = 2;
     */
    value: Table_NotPresentInSchema;
    case: "notPresent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.Table.
 * Use `create(TableSchema)` to create a new message.
 */
export const TableSchema: GenMessage<Table> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 0);

/**
 * PresentInSchema is a table that is present in a SQL document and in the YAML definitions.
 * Values are inferred and read from YAML.
 *
 * @generated from message quary.service.v1.Table.PresentInSchema
 */
export type Table_PresentInSchema = Message<"quary.service.v1.Table.PresentInSchema"> & {
  /**
   * @generated from field: repeated quary.service.v1.Table.PresentInSchema.PresentRow rows = 1;
   */
  rows: Table_PresentInSchema_PresentRow[];
};

/**
 * Describes the message quary.service.v1.Table.PresentInSchema.
 * Use `create(Table_PresentInSchemaSchema)` to create a new message.
 */
export const Table_PresentInSchemaSchema: GenMessage<Table_PresentInSchema> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 0, 0);

/**
 * @generated from message quary.service.v1.Table.PresentInSchema.PresentRow
 */
export type Table_PresentInSchema_PresentRow = Message<"quary.service.v1.Table.PresentInSchema.PresentRow"> & {
  /**
   * @generated from oneof quary.service.v1.Table.PresentInSchema.PresentRow.row
   */
  row: {
    /**
     * @generated from field: quary.service.v1.Row present_in_sql_and_definitions = 1;
     */
    value: Row;
    case: "presentInSqlAndDefinitions";
  } | {
    /**
     * @generated from field: quary.service.v1.Row missing_in_definitions = 2;
     */
    value: Row;
    case: "missingInDefinitions";
  } | {
    /**
     * @generated from field: quary.service.v1.Row present_in_definitions_but_not_recognisable_in_sql = 3;
     */
    value: Row;
    case: "presentInDefinitionsButNotRecognisableInSql";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.Table.PresentInSchema.PresentRow.
 * Use `create(Table_PresentInSchema_PresentRowSchema)` to create a new message.
 */
export const Table_PresentInSchema_PresentRowSchema: GenMessage<Table_PresentInSchema_PresentRow> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 0, 0, 0);

/**
 * NotPresentInSchema is a table that is present as SQL but not in the YAML definitions. And so all the values
 * are inferred.
 *
 * @generated from message quary.service.v1.Table.NotPresentInSchema
 */
export type Table_NotPresentInSchema = Message<"quary.service.v1.Table.NotPresentInSchema"> & {
  /**
   * @generated from field: repeated quary.service.v1.Row rows = 1;
   */
  rows: Row[];
};

/**
 * Describes the message quary.service.v1.Table.NotPresentInSchema.
 * Use `create(Table_NotPresentInSchemaSchema)` to create a new message.
 */
export const Table_NotPresentInSchemaSchema: GenMessage<Table_NotPresentInSchema> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 0, 1);

/**
 * Row is a row in the table.
 *
 * @generated from message quary.service.v1.Row
 */
export type Row = Message<"quary.service.v1.Row"> & {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: repeated quary.service.v1.RowTest tests = 2;
   */
  tests: RowTest[];

  /**
   * @generated from field: quary.service.v1.RowDescription description = 3;
   */
  description?: RowDescription;
};

/**
 * Describes the message quary.service.v1.Row.
 * Use `create(RowSchema)` to create a new message.
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 1);

/**
 * TableTest is a test that is run against a row in a table. It is a oneof because the test can be inferred from the
 * YAML definitions, or it can be present in the SQL document.
 *
 * @generated from message quary.service.v1.RowTest
 */
export type RowTest = Message<"quary.service.v1.RowTest"> & {
  /**
   * @generated from oneof quary.service.v1.RowTest.test
   */
  test: {
    /**
     * @generated from field: quary.service.v1.RowTestDetails present_and_not_inferred = 1;
     */
    value: RowTestDetails;
    case: "presentAndNotInferred";
  } | {
    /**
     * @generated from field: quary.service.v1.RowTestDetails present_and_inferred = 2;
     */
    value: RowTestDetails;
    case: "presentAndInferred";
  } | {
    /**
     * @generated from field: quary.service.v1.RowTestDetails not_present_but_inferred = 3;
     */
    value: RowTestDetails;
    case: "notPresentButInferred";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.RowTest.
 * Use `create(RowTestSchema)` to create a new message.
 */
export const RowTestSchema: GenMessage<RowTest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 2);

/**
 * RowTestDetails encapsulates the details of tests associated with row and column data.
 * The 'column_test' field within this structure is specifically used to manage test operations
 * such as deletion and addition. These operations are typically invoked through callbacks.
 *
 * @generated from message quary.service.v1.RowTestDetails
 */
export type RowTestDetails = Message<"quary.service.v1.RowTestDetails"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * @generated from field: quary.service.v1.ColumnTest column_test = 2;
   */
  columnTest?: ColumnTest;
};

/**
 * Describes the message quary.service.v1.RowTestDetails.
 * Use `create(RowTestDetailsSchema)` to create a new message.
 */
export const RowTestDetailsSchema: GenMessage<RowTestDetails> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 3);

/**
 * RowDescription is a description of a row in a table. It is a oneof because the description can be inferred from the
 * YAML definitions and/or it can be present in the SQL document.
 *
 * @generated from message quary.service.v1.RowDescription
 */
export type RowDescription = Message<"quary.service.v1.RowDescription"> & {
  /**
   * @generated from oneof quary.service.v1.RowDescription.description
   */
  description: {
    /**
     * @generated from field: string present = 1;
     */
    value: string;
    case: "present";
  } | {
    /**
     * @generated from field: string present_and_inferred_identical = 2;
     */
    value: string;
    case: "presentAndInferredIdentical";
  } | {
    /**
     * @generated from field: quary.service.v1.RowDescription.PresentWithInference present_with_different_inference = 3;
     */
    value: RowDescription_PresentWithInference;
    case: "presentWithDifferentInference";
  } | {
    /**
     * @generated from field: string inferred = 4;
     */
    value: string;
    case: "inferred";
  } | {
    /**
     * @generated from field: google.protobuf.Empty not_present = 5;
     */
    value: Empty;
    case: "notPresent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.RowDescription.
 * Use `create(RowDescriptionSchema)` to create a new message.
 */
export const RowDescriptionSchema: GenMessage<RowDescription> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 4);

/**
 * @generated from message quary.service.v1.RowDescription.PresentWithInference
 */
export type RowDescription_PresentWithInference = Message<"quary.service.v1.RowDescription.PresentWithInference"> & {
  /**
   * @generated from field: string present = 1;
   */
  present: string;

  /**
   * @generated from field: string inferred = 2;
   */
  inferred: string;
};

/**
 * Describes the message quary.service.v1.RowDescription.PresentWithInference.
 * Use `create(RowDescription_PresentWithInferenceSchema)` to create a new message.
 */
export const RowDescription_PresentWithInferenceSchema: GenMessage<RowDescription_PresentWithInference> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_table, 4, 0);

