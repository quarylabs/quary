// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file quary/service/v1/types.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message quary.service.v1.Test
 */
export class Test extends Message<Test> {
  /**
   * @generated from oneof quary.service.v1.Test.test_type
   */
  testType: {
    /**
     * @generated from field: quary.service.v1.TestSQLFile sql = 1;
     */
    value: TestSQLFile;
    case: "sql";
  } | {
    /**
     * @generated from field: quary.service.v1.TestUnique unique = 2;
     */
    value: TestUnique;
    case: "unique";
  } | {
    /**
     * @generated from field: quary.service.v1.TestNotNull not_null = 3;
     */
    value: TestNotNull;
    case: "notNull";
  } | {
    /**
     * @generated from field: quary.service.v1.TestRelationship relationship = 4;
     */
    value: TestRelationship;
    case: "relationship";
  } | {
    /**
     * @generated from field: quary.service.v1.TestAcceptedValues accepted_values = 5;
     */
    value: TestAcceptedValues;
    case: "acceptedValues";
  } | {
    /**
     * @generated from field: quary.service.v1.TestGreaterThanOrEqual greater_than_or_equal = 6;
     */
    value: TestGreaterThanOrEqual;
    case: "greaterThanOrEqual";
  } | {
    /**
     * @generated from field: quary.service.v1.TestLessThanOrEqual less_than_or_equal = 7;
     */
    value: TestLessThanOrEqual;
    case: "lessThanOrEqual";
  } | {
    /**
     * @generated from field: quary.service.v1.TestGreaterThan greater_than = 8;
     */
    value: TestGreaterThan;
    case: "greaterThan";
  } | {
    /**
     * @generated from field: quary.service.v1.TestLessThan less_than = 9;
     */
    value: TestLessThan;
    case: "lessThan";
  } | {
    /**
     * @generated from field: quary.service.v1.TestMultiColumnUnique multi_column_unique = 10;
     */
    value: TestMultiColumnUnique;
    case: "multiColumnUnique";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Test>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Test";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sql", kind: "message", T: TestSQLFile, oneof: "test_type" },
    { no: 2, name: "unique", kind: "message", T: TestUnique, oneof: "test_type" },
    { no: 3, name: "not_null", kind: "message", T: TestNotNull, oneof: "test_type" },
    { no: 4, name: "relationship", kind: "message", T: TestRelationship, oneof: "test_type" },
    { no: 5, name: "accepted_values", kind: "message", T: TestAcceptedValues, oneof: "test_type" },
    { no: 6, name: "greater_than_or_equal", kind: "message", T: TestGreaterThanOrEqual, oneof: "test_type" },
    { no: 7, name: "less_than_or_equal", kind: "message", T: TestLessThanOrEqual, oneof: "test_type" },
    { no: 8, name: "greater_than", kind: "message", T: TestGreaterThan, oneof: "test_type" },
    { no: 9, name: "less_than", kind: "message", T: TestLessThan, oneof: "test_type" },
    { no: 10, name: "multi_column_unique", kind: "message", T: TestMultiColumnUnique, oneof: "test_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Test {
    return new Test().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJsonString(jsonString, options);
  }

  static equals(a: Test | PlainMessage<Test> | undefined, b: Test | PlainMessage<Test> | undefined): boolean {
    return proto3.util.equals(Test, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestSQLFile
 */
export class TestSQLFile extends Message<TestSQLFile> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: repeated string references = 2;
   */
  references: string[] = [];

  constructor(data?: PartialMessage<TestSQLFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestSQLFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "references", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSQLFile {
    return new TestSQLFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSQLFile {
    return new TestSQLFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSQLFile {
    return new TestSQLFile().fromJsonString(jsonString, options);
  }

  static equals(a: TestSQLFile | PlainMessage<TestSQLFile> | undefined, b: TestSQLFile | PlainMessage<TestSQLFile> | undefined): boolean {
    return proto3.util.equals(TestSQLFile, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestUnique
 */
export class TestUnique extends Message<TestUnique> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  constructor(data?: PartialMessage<TestUnique>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestUnique";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestUnique {
    return new TestUnique().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestUnique {
    return new TestUnique().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestUnique {
    return new TestUnique().fromJsonString(jsonString, options);
  }

  static equals(a: TestUnique | PlainMessage<TestUnique> | undefined, b: TestUnique | PlainMessage<TestUnique> | undefined): boolean {
    return proto3.util.equals(TestUnique, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestNotNull
 */
export class TestNotNull extends Message<TestNotNull> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  constructor(data?: PartialMessage<TestNotNull>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestNotNull";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestNotNull {
    return new TestNotNull().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestNotNull {
    return new TestNotNull().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestNotNull {
    return new TestNotNull().fromJsonString(jsonString, options);
  }

  static equals(a: TestNotNull | PlainMessage<TestNotNull> | undefined, b: TestNotNull | PlainMessage<TestNotNull> | undefined): boolean {
    return proto3.util.equals(TestNotNull, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestGreaterThanOrEqual
 */
export class TestGreaterThanOrEqual extends Message<TestGreaterThanOrEqual> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  constructor(data?: PartialMessage<TestGreaterThanOrEqual>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestGreaterThanOrEqual";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestGreaterThanOrEqual {
    return new TestGreaterThanOrEqual().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestGreaterThanOrEqual {
    return new TestGreaterThanOrEqual().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestGreaterThanOrEqual {
    return new TestGreaterThanOrEqual().fromJsonString(jsonString, options);
  }

  static equals(a: TestGreaterThanOrEqual | PlainMessage<TestGreaterThanOrEqual> | undefined, b: TestGreaterThanOrEqual | PlainMessage<TestGreaterThanOrEqual> | undefined): boolean {
    return proto3.util.equals(TestGreaterThanOrEqual, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestLessThanOrEqual
 */
export class TestLessThanOrEqual extends Message<TestLessThanOrEqual> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  constructor(data?: PartialMessage<TestLessThanOrEqual>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestLessThanOrEqual";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestLessThanOrEqual {
    return new TestLessThanOrEqual().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestLessThanOrEqual {
    return new TestLessThanOrEqual().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestLessThanOrEqual {
    return new TestLessThanOrEqual().fromJsonString(jsonString, options);
  }

  static equals(a: TestLessThanOrEqual | PlainMessage<TestLessThanOrEqual> | undefined, b: TestLessThanOrEqual | PlainMessage<TestLessThanOrEqual> | undefined): boolean {
    return proto3.util.equals(TestLessThanOrEqual, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestGreaterThan
 */
export class TestGreaterThan extends Message<TestGreaterThan> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  constructor(data?: PartialMessage<TestGreaterThan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestGreaterThan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestGreaterThan {
    return new TestGreaterThan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestGreaterThan {
    return new TestGreaterThan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestGreaterThan {
    return new TestGreaterThan().fromJsonString(jsonString, options);
  }

  static equals(a: TestGreaterThan | PlainMessage<TestGreaterThan> | undefined, b: TestGreaterThan | PlainMessage<TestGreaterThan> | undefined): boolean {
    return proto3.util.equals(TestGreaterThan, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestLessThan
 */
export class TestLessThan extends Message<TestLessThan> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  /**
   * @generated from field: string value = 5;
   */
  value = "";

  constructor(data?: PartialMessage<TestLessThan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestLessThan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestLessThan {
    return new TestLessThan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestLessThan {
    return new TestLessThan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestLessThan {
    return new TestLessThan().fromJsonString(jsonString, options);
  }

  static equals(a: TestLessThan | PlainMessage<TestLessThan> | undefined, b: TestLessThan | PlainMessage<TestLessThan> | undefined): boolean {
    return proto3.util.equals(TestLessThan, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestRelationship
 */
export class TestRelationship extends Message<TestRelationship> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string source_model = 2;
   */
  sourceModel = "";

  /**
   * @generated from field: string source_path = 3;
   */
  sourcePath = "";

  /**
   * @generated from field: string source_column = 4;
   */
  sourceColumn = "";

  /**
   * @generated from field: string target_model = 5;
   */
  targetModel = "";

  /**
   * @generated from field: string target_path = 7;
   */
  targetPath = "";

  /**
   * @generated from field: string target_column = 8;
   */
  targetColumn = "";

  constructor(data?: PartialMessage<TestRelationship>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestRelationship";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "source_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "source_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "source_column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "target_model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "target_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "target_column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRelationship {
    return new TestRelationship().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRelationship {
    return new TestRelationship().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRelationship {
    return new TestRelationship().fromJsonString(jsonString, options);
  }

  static equals(a: TestRelationship | PlainMessage<TestRelationship> | undefined, b: TestRelationship | PlainMessage<TestRelationship> | undefined): boolean {
    return proto3.util.equals(TestRelationship, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestAcceptedValues
 */
export class TestAcceptedValues extends Message<TestAcceptedValues> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: string column = 4;
   */
  column = "";

  /**
   * @generated from field: repeated string accepted_values = 5;
   */
  acceptedValues: string[] = [];

  constructor(data?: PartialMessage<TestAcceptedValues>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestAcceptedValues";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "accepted_values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestAcceptedValues {
    return new TestAcceptedValues().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestAcceptedValues {
    return new TestAcceptedValues().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestAcceptedValues {
    return new TestAcceptedValues().fromJsonString(jsonString, options);
  }

  static equals(a: TestAcceptedValues | PlainMessage<TestAcceptedValues> | undefined, b: TestAcceptedValues | PlainMessage<TestAcceptedValues> | undefined): boolean {
    return proto3.util.equals(TestAcceptedValues, a, b);
  }
}

/**
 * @generated from message quary.service.v1.TestMultiColumnUnique
 */
export class TestMultiColumnUnique extends Message<TestMultiColumnUnique> {
  /**
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  /**
   * @generated from field: string model = 2;
   */
  model = "";

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: repeated string columns = 4;
   */
  columns: string[] = [];

  constructor(data?: PartialMessage<TestMultiColumnUnique>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.TestMultiColumnUnique";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "model", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMultiColumnUnique {
    return new TestMultiColumnUnique().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMultiColumnUnique {
    return new TestMultiColumnUnique().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMultiColumnUnique {
    return new TestMultiColumnUnique().fromJsonString(jsonString, options);
  }

  static equals(a: TestMultiColumnUnique | PlainMessage<TestMultiColumnUnique> | undefined, b: TestMultiColumnUnique | PlainMessage<TestMultiColumnUnique> | undefined): boolean {
    return proto3.util.equals(TestMultiColumnUnique, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Seed
 */
export class Seed extends Message<Seed> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string file_path = 2;
   */
  filePath = "";

  /**
   * @generated from field: string file_sha256_hash = 3;
   */
  fileSha256Hash = "";

  constructor(data?: PartialMessage<Seed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Seed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_sha256_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Seed {
    return new Seed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Seed {
    return new Seed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Seed {
    return new Seed().fromJsonString(jsonString, options);
  }

  static equals(a: Seed | PlainMessage<Seed> | undefined, b: Seed | PlainMessage<Seed> | undefined): boolean {
    return proto3.util.equals(Seed, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Model
 */
export class Model extends Message<Model> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * Tags are used to group different parts of the project together.
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[] = [];

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * @generated from field: string file_sha256_hash = 7;
   */
  fileSha256Hash = "";

  /**
   * @generated from field: optional string materialization = 8;
   */
  materialization?: string;

  /**
   * @generated from field: repeated quary.service.v1.Model.ModelColum columns = 5;
   */
  columns: Model_ModelColum[] = [];

  /**
   * References to other models/seeds/snapshots that are used in the model. These are unique keys and sorted
   * alphabetically.
   *
   * @generated from field: repeated string references = 6;
   */
  references: string[] = [];

  constructor(data?: PartialMessage<Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "file_sha256_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "materialization", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "columns", kind: "message", T: Model_ModelColum, repeated: true },
    { no: 6, name: "references", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model {
    return new Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model {
    return new Model().fromJsonString(jsonString, options);
  }

  static equals(a: Model | PlainMessage<Model> | undefined, b: Model | PlainMessage<Model> | undefined): boolean {
    return proto3.util.equals(Model, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Model.ModelColum
 */
export class Model_ModelColum extends Message<Model_ModelColum> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  constructor(data?: PartialMessage<Model_ModelColum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Model.ModelColum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Model_ModelColum {
    return new Model_ModelColum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Model_ModelColum {
    return new Model_ModelColum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Model_ModelColum {
    return new Model_ModelColum().fromJsonString(jsonString, options);
  }

  static equals(a: Model_ModelColum | PlainMessage<Model_ModelColum> | undefined, b: Model_ModelColum | PlainMessage<Model_ModelColum> | undefined): boolean {
    return proto3.util.equals(Model_ModelColum, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Snapshot
 */
export class Snapshot extends Message<Snapshot> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * Tags are used to group different parts of the project together.
   *
   * @generated from field: repeated string tags = 8;
   */
  tags: string[] = [];

  /**
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * @generated from field: string file_sha256_hash = 4;
   */
  fileSha256Hash = "";

  /**
   * @generated from field: string unique_key = 5;
   */
  uniqueKey = "";

  /**
   * @generated from field: quary.service.v1.Snapshot.SnapshotStrategy strategy = 6;
   */
  strategy?: Snapshot_SnapshotStrategy;

  /**
   * References to other seeds/sources that are used in the snapshot. These are unique keys and sorted
   * alphabetically.
   *
   * @generated from field: repeated string references = 7;
   */
  references: string[] = [];

  constructor(data?: PartialMessage<Snapshot>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Snapshot";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "file_sha256_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "unique_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "strategy", kind: "message", T: Snapshot_SnapshotStrategy },
    { no: 7, name: "references", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot {
    return new Snapshot().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot {
    return new Snapshot().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot | PlainMessage<Snapshot> | undefined, b: Snapshot | PlainMessage<Snapshot> | undefined): boolean {
    return proto3.util.equals(Snapshot, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Snapshot.SnapshotStrategy
 */
export class Snapshot_SnapshotStrategy extends Message<Snapshot_SnapshotStrategy> {
  /**
   * @generated from oneof quary.service.v1.Snapshot.SnapshotStrategy.strategy_type
   */
  strategyType: {
    /**
     * @generated from field: quary.service.v1.Snapshot.SnapshotStrategy.TimestampStrategy timestamp = 1;
     */
    value: Snapshot_SnapshotStrategy_TimestampStrategy;
    case: "timestamp";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Snapshot_SnapshotStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Snapshot.SnapshotStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Snapshot_SnapshotStrategy_TimestampStrategy, oneof: "strategy_type" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot_SnapshotStrategy {
    return new Snapshot_SnapshotStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot_SnapshotStrategy {
    return new Snapshot_SnapshotStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot_SnapshotStrategy {
    return new Snapshot_SnapshotStrategy().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot_SnapshotStrategy | PlainMessage<Snapshot_SnapshotStrategy> | undefined, b: Snapshot_SnapshotStrategy | PlainMessage<Snapshot_SnapshotStrategy> | undefined): boolean {
    return proto3.util.equals(Snapshot_SnapshotStrategy, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Snapshot.SnapshotStrategy.TimestampStrategy
 */
export class Snapshot_SnapshotStrategy_TimestampStrategy extends Message<Snapshot_SnapshotStrategy_TimestampStrategy> {
  /**
   * @generated from field: string updated_at = 1;
   */
  updatedAt = "";

  constructor(data?: PartialMessage<Snapshot_SnapshotStrategy_TimestampStrategy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Snapshot.SnapshotStrategy.TimestampStrategy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Snapshot_SnapshotStrategy_TimestampStrategy {
    return new Snapshot_SnapshotStrategy_TimestampStrategy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Snapshot_SnapshotStrategy_TimestampStrategy {
    return new Snapshot_SnapshotStrategy_TimestampStrategy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Snapshot_SnapshotStrategy_TimestampStrategy {
    return new Snapshot_SnapshotStrategy_TimestampStrategy().fromJsonString(jsonString, options);
  }

  static equals(a: Snapshot_SnapshotStrategy_TimestampStrategy | PlainMessage<Snapshot_SnapshotStrategy_TimestampStrategy> | undefined, b: Snapshot_SnapshotStrategy_TimestampStrategy | PlainMessage<Snapshot_SnapshotStrategy_TimestampStrategy> | undefined): boolean {
    return proto3.util.equals(Snapshot_SnapshotStrategy_TimestampStrategy, a, b);
  }
}

/**
 * Generic source structure, used as input to generate the quary-specific source structure
 *
 * @generated from message quary.service.v1.DatabaseSource
 */
export class DatabaseSource extends Message<DatabaseSource> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: repeated string columns = 3;
   */
  columns: string[] = [];

  constructor(data?: PartialMessage<DatabaseSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.DatabaseSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "columns", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DatabaseSource {
    return new DatabaseSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DatabaseSource {
    return new DatabaseSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DatabaseSource {
    return new DatabaseSource().fromJsonString(jsonString, options);
  }

  static equals(a: DatabaseSource | PlainMessage<DatabaseSource> | undefined, b: DatabaseSource | PlainMessage<DatabaseSource> | undefined): boolean {
    return proto3.util.equals(DatabaseSource, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Source
 */
export class Source extends Message<Source> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * Tags are used to group different parts of the project together.
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * TODO Replace File path references with whole file references
   *
   * @generated from field: string file_path = 4;
   */
  filePath = "";

  /**
   * @generated from field: repeated quary.service.v1.Source.SourceColumn columns = 5;
   */
  columns: Source_SourceColumn[] = [];

  constructor(data?: PartialMessage<Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "columns", kind: "message", T: Source_SourceColumn, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source {
    return new Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source {
    return new Source().fromJsonString(jsonString, options);
  }

  static equals(a: Source | PlainMessage<Source> | undefined, b: Source | PlainMessage<Source> | undefined): boolean {
    return proto3.util.equals(Source, a, b);
  }
}

/**
 * @generated from message quary.service.v1.Source.SourceColumn
 */
export class Source_SourceColumn extends Message<Source_SourceColumn> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  constructor(data?: PartialMessage<Source_SourceColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.Source.SourceColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Source_SourceColumn {
    return new Source_SourceColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Source_SourceColumn {
    return new Source_SourceColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Source_SourceColumn {
    return new Source_SourceColumn().fromJsonString(jsonString, options);
  }

  static equals(a: Source_SourceColumn | PlainMessage<Source_SourceColumn> | undefined, b: Source_SourceColumn | PlainMessage<Source_SourceColumn> | undefined): boolean {
    return proto3.util.equals(Source_SourceColumn, a, b);
  }
}

