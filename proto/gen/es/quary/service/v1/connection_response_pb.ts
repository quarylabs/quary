// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file quary/service/v1/connection_response.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message quary.service.v1.BigQueryProjectReference
 */
export class BigQueryProjectReference extends Message<BigQueryProjectReference> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  constructor(data?: PartialMessage<BigQueryProjectReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryProjectReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryProjectReference {
    return new BigQueryProjectReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryProjectReference {
    return new BigQueryProjectReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryProjectReference {
    return new BigQueryProjectReference().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryProjectReference | PlainMessage<BigQueryProjectReference> | undefined, b: BigQueryProjectReference | PlainMessage<BigQueryProjectReference> | undefined): boolean {
    return proto3.util.equals(BigQueryProjectReference, a, b);
  }
}

/**
 * Project API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/projects/list
 *
 * @generated from message quary.service.v1.BigQueryProject
 */
export class BigQueryProject extends Message<BigQueryProject> {
  /**
   * The resource type.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * An opaque ID of this project.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The numeric ID of this project.
   *
   * @generated from field: string numeric_id = 3;
   */
  numericId = "";

  /**
   * A unique reference to a project.
   *
   * @generated from field: quary.service.v1.BigQueryProjectReference project_reference = 4;
   */
  projectReference?: BigQueryProjectReference;

  /**
   * A descriptive name for this project.
   *
   * @generated from field: string friendly_name = 5;
   */
  friendlyName = "";

  constructor(data?: PartialMessage<BigQueryProject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryProject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "numeric_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_reference", kind: "message", T: BigQueryProjectReference },
    { no: 5, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryProject {
    return new BigQueryProject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryProject {
    return new BigQueryProject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryProject {
    return new BigQueryProject().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryProject | PlainMessage<BigQueryProject> | undefined, b: BigQueryProject | PlainMessage<BigQueryProject> | undefined): boolean {
    return proto3.util.equals(BigQueryProject, a, b);
  }
}

/**
 * Dataset Reference API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets#DatasetReference
 *
 * @generated from message quary.service.v1.BigQueryDatasetReference
 */
export class BigQueryDatasetReference extends Message<BigQueryDatasetReference> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  constructor(data?: PartialMessage<BigQueryDatasetReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryDatasetReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryDatasetReference {
    return new BigQueryDatasetReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryDatasetReference {
    return new BigQueryDatasetReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryDatasetReference {
    return new BigQueryDatasetReference().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryDatasetReference | PlainMessage<BigQueryDatasetReference> | undefined, b: BigQueryDatasetReference | PlainMessage<BigQueryDatasetReference> | undefined): boolean {
    return proto3.util.equals(BigQueryDatasetReference, a, b);
  }
}

/**
 * Dataset API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets/list
 *
 * @generated from message quary.service.v1.BigQueryDataset
 */
export class BigQueryDataset extends Message<BigQueryDataset> {
  /**
   * The resource type. This property always returns the value "bigquery#dataset"
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * The fully-qualified, unique, opaque ID of the dataset.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * The dataset reference. Use this property to access specific parts of the dataset's ID, such as project ID or dataset ID.
   *
   * @generated from field: quary.service.v1.BigQueryDatasetReference dataset_reference = 3;
   */
  datasetReference?: BigQueryDatasetReference;

  /**
   * An alternate name for the dataset. The friendly name is purely decorative in nature.
   *
   * @generated from field: string friendly_name = 4;
   */
  friendlyName = "";

  /**
   * The labels associated with this dataset. You can use these to organize and group your datasets.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string } = {};

  /**
   * The geographic location where the dataset resides.
   *
   * @generated from field: string location = 6;
   */
  location = "";

  constructor(data?: PartialMessage<BigQueryDataset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryDataset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dataset_reference", kind: "message", T: BigQueryDatasetReference },
    { no: 4, name: "friendly_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "labels", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryDataset {
    return new BigQueryDataset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryDataset {
    return new BigQueryDataset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryDataset {
    return new BigQueryDataset().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryDataset | PlainMessage<BigQueryDataset> | undefined, b: BigQueryDataset | PlainMessage<BigQueryDataset> | undefined): boolean {
    return proto3.util.equals(BigQueryDataset, a, b);
  }
}

/**
 * Table Reference API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#TableReference
 *
 * @generated from message quary.service.v1.BigQueryTableReference
 */
export class BigQueryTableReference extends Message<BigQueryTableReference> {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * @generated from field: string dataset_id = 2;
   */
  datasetId = "";

  /**
   * @generated from field: string table_id = 3;
   */
  tableId = "";

  constructor(data?: PartialMessage<BigQueryTableReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryTableReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dataset_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTableReference {
    return new BigQueryTableReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTableReference {
    return new BigQueryTableReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTableReference {
    return new BigQueryTableReference().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTableReference | PlainMessage<BigQueryTableReference> | undefined, b: BigQueryTableReference | PlainMessage<BigQueryTableReference> | undefined): boolean {
    return proto3.util.equals(BigQueryTableReference, a, b);
  }
}

/**
 * Table API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables/list
 *
 * @generated from message quary.service.v1.BigQueryTable
 */
export class BigQueryTable extends Message<BigQueryTable> {
  /**
   * The resource type.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * An opaque ID uniquely identifying the table.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * A reference uniquely identifying the table.
   *
   * @generated from field: quary.service.v1.BigQueryTableReference table_reference = 3;
   */
  tableReference?: BigQueryTableReference;

  /**
   * The type of table. Possible values are: TABLE, VIEW.
   *
   * @generated from field: string type = 4;
   */
  type = "";

  /**
   * The time when this table was created, in milliseconds since the epoch.
   *
   * @generated from field: string creation_time = 5;
   */
  creationTime = "";

  constructor(data?: PartialMessage<BigQueryTable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryTable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "table_reference", kind: "message", T: BigQueryTableReference },
    { no: 4, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "creation_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTable {
    return new BigQueryTable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTable {
    return new BigQueryTable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTable {
    return new BigQueryTable().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTable | PlainMessage<BigQueryTable> | undefined, b: BigQueryTable | PlainMessage<BigQueryTable> | undefined): boolean {
    return proto3.util.equals(BigQueryTable, a, b);
  }
}

/**
 * Table Field API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#TableFieldSchema
 *
 * @generated from message quary.service.v1.BigQueryTableField
 */
export class BigQueryTableField extends Message<BigQueryTableField> {
  /**
   * The field name.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The field data type. Possible values are: STRING, INTEGER, FLOAT, BOOLEAN, TIMESTAMP.
   *
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * The field mode. Possible values are: NULLABLE, REQUIRED, REPEATED.
   *
   * @generated from field: string mode = 3;
   */
  mode = "";

  /**
   * Describes the nested schema fields if the type property is set to RECORD.
   *
   * @generated from field: repeated quary.service.v1.BigQueryTableField fields = 4;
   */
  fields: BigQueryTableField[] = [];

  /**
   * The field description.
   *
   * @generated from field: string description = 5;
   */
  description = "";

  constructor(data?: PartialMessage<BigQueryTableField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryTableField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fields", kind: "message", T: BigQueryTableField, repeated: true },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTableField {
    return new BigQueryTableField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTableField {
    return new BigQueryTableField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTableField {
    return new BigQueryTableField().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTableField | PlainMessage<BigQueryTableField> | undefined, b: BigQueryTableField | PlainMessage<BigQueryTableField> | undefined): boolean {
    return proto3.util.equals(BigQueryTableField, a, b);
  }
}

/**
 * Table Schema API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#TableSchema
 *
 * @generated from message quary.service.v1.BigQueryTableSchema
 */
export class BigQueryTableSchema extends Message<BigQueryTableSchema> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * Describes the fields in a table.
   *
   * @generated from field: repeated quary.service.v1.BigQueryTableField fields = 3;
   */
  fields: BigQueryTableField[] = [];

  /**
   * The field description.
   *
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<BigQueryTableSchema>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryTableSchema";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "fields", kind: "message", T: BigQueryTableField, repeated: true },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTableSchema {
    return new BigQueryTableSchema().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTableSchema {
    return new BigQueryTableSchema().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTableSchema {
    return new BigQueryTableSchema().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTableSchema | PlainMessage<BigQueryTableSchema> | undefined, b: BigQueryTableSchema | PlainMessage<BigQueryTableSchema> | undefined): boolean {
    return proto3.util.equals(BigQueryTableSchema, a, b);
  }
}

/**
 * JobReference API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/JobReference
 *
 * @generated from message quary.service.v1.BigQueryJobReference
 */
export class BigQueryJobReference extends Message<BigQueryJobReference> {
  /**
   * The ID of the project containing this job.
   *
   * @generated from field: string project_id = 1;
   */
  projectId = "";

  /**
   * The ID of the job.
   *
   * @generated from field: string job_id = 2;
   */
  jobId = "";

  /**
   * The geographic location of the job.
   *
   * @generated from field: string location = 3;
   */
  location = "";

  constructor(data?: PartialMessage<BigQueryJobReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryJobReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryJobReference {
    return new BigQueryJobReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryJobReference {
    return new BigQueryJobReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryJobReference {
    return new BigQueryJobReference().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryJobReference | PlainMessage<BigQueryJobReference> | undefined, b: BigQueryJobReference | PlainMessage<BigQueryJobReference> | undefined): boolean {
    return proto3.util.equals(BigQueryJobReference, a, b);
  }
}

/**
 * BigQueryError API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/ErrorProto
 *
 * @generated from message quary.service.v1.BigQueryError
 */
export class BigQueryError extends Message<BigQueryError> {
  /**
   * A short error code that summarizes the error.
   *
   * @generated from field: string reason = 1;
   */
  reason = "";

  /**
   * The location of the error, if applicable.
   *
   * @generated from field: string location = 2;
   */
  location = "";

  /**
   * A human-readable description of the error.
   *
   * @generated from field: string debug_info = 3;
   */
  debugInfo = "";

  /**
   * A human-readable description of the error.
   *
   * @generated from field: string message = 4;
   */
  message = "";

  constructor(data?: PartialMessage<BigQueryError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "debug_info", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryError {
    return new BigQueryError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryError {
    return new BigQueryError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryError {
    return new BigQueryError().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryError | PlainMessage<BigQueryError> | undefined, b: BigQueryError | PlainMessage<BigQueryError> | undefined): boolean {
    return proto3.util.equals(BigQueryError, a, b);
  }
}

/**
 * JobStatus API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/JobStatus
 *
 * @generated from message quary.service.v1.BigQueryJobStatus
 */
export class BigQueryJobStatus extends Message<BigQueryJobStatus> {
  /**
   * The state of the job. Possible values include: "PENDING", "RUNNING", "DONE".
   *
   * @generated from field: string state = 1;
   */
  state = "";

  /**
   * Final error result of the job. If present, indicates that the job has completed and was unsuccessful.
   *
   * @generated from field: string error_result = 2;
   */
  errorResult = "";

  /**
   * The final error result of the job as a human-readable string.
   *
   * @generated from field: string error_message = 3;
   */
  errorMessage = "";

  constructor(data?: PartialMessage<BigQueryJobStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryJobStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error_result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryJobStatus {
    return new BigQueryJobStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryJobStatus {
    return new BigQueryJobStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryJobStatus {
    return new BigQueryJobStatus().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryJobStatus | PlainMessage<BigQueryJobStatus> | undefined, b: BigQueryJobStatus | PlainMessage<BigQueryJobStatus> | undefined): boolean {
    return proto3.util.equals(BigQueryJobStatus, a, b);
  }
}

/**
 * Job API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/Job
 *
 * @generated from message quary.service.v1.BigQueryJob
 */
export class BigQueryJob extends Message<BigQueryJob> {
  /**
   * The resource type.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * An opaque ID uniquely identifying the job.
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * A URL that can be used to access this resource again.
   *
   * @generated from field: string self_link = 3;
   */
  selfLink = "";

  /**
   * The email address of the user who ran the job.
   *
   * @generated from field: string user_email = 4;
   */
  userEmail = "";

  /**
   * A reference uniquely identifying the job.
   *
   * @generated from field: quary.service.v1.BigQueryJobReference job_reference = 5;
   */
  jobReference?: BigQueryJobReference;

  /**
   * Information about the job, including starting time and ending time of the job.
   *
   * @generated from field: quary.service.v1.BigQueryJobStatus status = 6;
   */
  status?: BigQueryJobStatus;

  constructor(data?: PartialMessage<BigQueryJob>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryJob";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "self_link", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "job_reference", kind: "message", T: BigQueryJobReference },
    { no: 6, name: "status", kind: "message", T: BigQueryJobStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryJob {
    return new BigQueryJob().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryJob {
    return new BigQueryJob().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryJob {
    return new BigQueryJob().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryJob | PlainMessage<BigQueryJob> | undefined, b: BigQueryJob | PlainMessage<BigQueryJob> | undefined): boolean {
    return proto3.util.equals(BigQueryJob, a, b);
  }
}

/**
 * @generated from message quary.service.v1.BigQueryFieldValue
 */
export class BigQueryFieldValue extends Message<BigQueryFieldValue> {
  /**
   * Represents the 'f' in a JSON object
   *
   * @generated from field: string f = 1;
   */
  f = "";

  /**
   * Represents the 'v' in a JSON object
   *
   * @generated from field: string v = 2;
   */
  v = "";

  constructor(data?: PartialMessage<BigQueryFieldValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryFieldValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "f", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "v", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryFieldValue {
    return new BigQueryFieldValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryFieldValue {
    return new BigQueryFieldValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryFieldValue {
    return new BigQueryFieldValue().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryFieldValue | PlainMessage<BigQueryFieldValue> | undefined, b: BigQueryFieldValue | PlainMessage<BigQueryFieldValue> | undefined): boolean {
    return proto3.util.equals(BigQueryFieldValue, a, b);
  }
}

/**
 * @generated from message quary.service.v1.BigQueryTableRow
 */
export class BigQueryTableRow extends Message<BigQueryTableRow> {
  /**
   * Represents a single row as a series of field-value pairs
   *
   * @generated from field: repeated quary.service.v1.BigQueryFieldValue f = 1;
   */
  f: BigQueryFieldValue[] = [];

  constructor(data?: PartialMessage<BigQueryTableRow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryTableRow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "f", kind: "message", T: BigQueryFieldValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryTableRow {
    return new BigQueryTableRow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryTableRow {
    return new BigQueryTableRow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryTableRow {
    return new BigQueryTableRow().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryTableRow | PlainMessage<BigQueryTableRow> | undefined, b: BigQueryTableRow | PlainMessage<BigQueryTableRow> | undefined): boolean {
    return proto3.util.equals(BigQueryTableRow, a, b);
  }
}

/**
 * BigQueryJobResults API Documentation: https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults
 *
 * @generated from message quary.service.v1.BigQueryJobResults
 */
export class BigQueryJobResults extends Message<BigQueryJobResults> {
  /**
   * The resource type.
   *
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * The schema of the results. Present only when the query completes successfully.
   *
   * @generated from field: quary.service.v1.BigQueryTableSchema schema = 2;
   */
  schema?: BigQueryTableSchema;

  /**
   * A reference uniquely identifying the job.
   *
   * @generated from field: quary.service.v1.BigQueryJobReference job_reference = 3;
   */
  jobReference?: BigQueryJobReference;

  /**
   * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results.
   *
   * @generated from field: string total_rows = 4;
   */
  totalRows = "";

  /**
   * A token used for paging results.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken = "";

  /**
   * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above.
   *
   * @generated from field: repeated quary.service.v1.BigQueryTableRow rows = 6;
   */
  rows: BigQueryTableRow[] = [];

  /**
   * Whether the query result was fetched from the query cache.
   *
   * @generated from field: string job_complete = 7;
   */
  jobComplete = "";

  /**
   * The first errors encountered during the running of the job. The final message includes the number of errors encountered.
   *
   * @generated from field: repeated quary.service.v1.BigQueryError errors = 8;
   */
  errors: BigQueryError[] = [];

  /**
   * Whether the query result was fetched from the query cache.
   *
   * @generated from field: string cache_hit = 9;
   */
  cacheHit = "";

  /**
   * The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
   *
   * @generated from field: string num_dml_affected_rows = 10;
   */
  numDmlAffectedRows = "";

  constructor(data?: PartialMessage<BigQueryJobResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryJobResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "schema", kind: "message", T: BigQueryTableSchema },
    { no: 3, name: "job_reference", kind: "message", T: BigQueryJobReference },
    { no: 4, name: "total_rows", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "rows", kind: "message", T: BigQueryTableRow, repeated: true },
    { no: 7, name: "job_complete", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "errors", kind: "message", T: BigQueryError, repeated: true },
    { no: 9, name: "cache_hit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "num_dml_affected_rows", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryJobResults {
    return new BigQueryJobResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryJobResults {
    return new BigQueryJobResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryJobResults {
    return new BigQueryJobResults().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryJobResults | PlainMessage<BigQueryJobResults> | undefined, b: BigQueryJobResults | PlainMessage<BigQueryJobResults> | undefined): boolean {
    return proto3.util.equals(BigQueryJobResults, a, b);
  }
}

/**
 * Google Oauth 2.0 token API Documentation: https://developers.google.com/identity/protocols/oauth2/web-server#httprest
 *
 * @generated from message quary.service.v1.BigQueryOauthToken
 */
export class BigQueryOauthToken extends Message<BigQueryOauthToken> {
  /**
   * short-lived token
   *
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * absolute time the token expires
   *
   * @generated from field: string expiry_time = 3;
   */
  expiryTime = "";

  constructor(data?: PartialMessage<BigQueryOauthToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryOauthToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryOauthToken {
    return new BigQueryOauthToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryOauthToken {
    return new BigQueryOauthToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryOauthToken {
    return new BigQueryOauthToken().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryOauthToken | PlainMessage<BigQueryOauthToken> | undefined, b: BigQueryOauthToken | PlainMessage<BigQueryOauthToken> | undefined): boolean {
    return proto3.util.equals(BigQueryOauthToken, a, b);
  }
}

/**
 * @generated from message quary.service.v1.BigQueryOauthTokenRefresh
 */
export class BigQueryOauthTokenRefresh extends Message<BigQueryOauthTokenRefresh> {
  /**
   * short-lived token
   *
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * absolute time the token expires
   *
   * @generated from field: string expiry_time = 2;
   */
  expiryTime = "";

  constructor(data?: PartialMessage<BigQueryOauthTokenRefresh>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.BigQueryOauthTokenRefresh";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expiry_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigQueryOauthTokenRefresh {
    return new BigQueryOauthTokenRefresh().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigQueryOauthTokenRefresh {
    return new BigQueryOauthTokenRefresh().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigQueryOauthTokenRefresh {
    return new BigQueryOauthTokenRefresh().fromJsonString(jsonString, options);
  }

  static equals(a: BigQueryOauthTokenRefresh | PlainMessage<BigQueryOauthTokenRefresh> | undefined, b: BigQueryOauthTokenRefresh | PlainMessage<BigQueryOauthTokenRefresh> | undefined): boolean {
    return proto3.util.equals(BigQueryOauthTokenRefresh, a, b);
  }
}

/**
 * Snowflake SSO
 *
 * @generated from message quary.service.v1.SnowflakeOauthProxyRequest
 */
export class SnowflakeOauthProxyRequest extends Message<SnowflakeOauthProxyRequest> {
  /**
   * @generated from field: string account_url = 1;
   */
  accountUrl = "";

  /**
   * @generated from field: string client_id = 2;
   */
  clientId = "";

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<SnowflakeOauthProxyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.SnowflakeOauthProxyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "client_secret", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnowflakeOauthProxyRequest {
    return new SnowflakeOauthProxyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnowflakeOauthProxyRequest {
    return new SnowflakeOauthProxyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnowflakeOauthProxyRequest {
    return new SnowflakeOauthProxyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SnowflakeOauthProxyRequest | PlainMessage<SnowflakeOauthProxyRequest> | undefined, b: SnowflakeOauthProxyRequest | PlainMessage<SnowflakeOauthProxyRequest> | undefined): boolean {
    return proto3.util.equals(SnowflakeOauthProxyRequest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.SnowflakeOauthToken
 */
export class SnowflakeOauthToken extends Message<SnowflakeOauthToken> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string refresh_token = 2;
   */
  refreshToken = "";

  /**
   * @generated from field: string expiry_time = 3;
   */
  expiryTime = "";

  constructor(data?: PartialMessage<SnowflakeOauthToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.SnowflakeOauthToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "refresh_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnowflakeOauthToken {
    return new SnowflakeOauthToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnowflakeOauthToken {
    return new SnowflakeOauthToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnowflakeOauthToken {
    return new SnowflakeOauthToken().fromJsonString(jsonString, options);
  }

  static equals(a: SnowflakeOauthToken | PlainMessage<SnowflakeOauthToken> | undefined, b: SnowflakeOauthToken | PlainMessage<SnowflakeOauthToken> | undefined): boolean {
    return proto3.util.equals(SnowflakeOauthToken, a, b);
  }
}

/**
 * @generated from message quary.service.v1.SnowflakeOauthRefreshToken
 */
export class SnowflakeOauthRefreshToken extends Message<SnowflakeOauthRefreshToken> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string expiry_time = 3;
   */
  expiryTime = "";

  constructor(data?: PartialMessage<SnowflakeOauthRefreshToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.SnowflakeOauthRefreshToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SnowflakeOauthRefreshToken {
    return new SnowflakeOauthRefreshToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SnowflakeOauthRefreshToken {
    return new SnowflakeOauthRefreshToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SnowflakeOauthRefreshToken {
    return new SnowflakeOauthRefreshToken().fromJsonString(jsonString, options);
  }

  static equals(a: SnowflakeOauthRefreshToken | PlainMessage<SnowflakeOauthRefreshToken> | undefined, b: SnowflakeOauthRefreshToken | PlainMessage<SnowflakeOauthRefreshToken> | undefined): boolean {
    return proto3.util.equals(SnowflakeOauthRefreshToken, a, b);
  }
}

