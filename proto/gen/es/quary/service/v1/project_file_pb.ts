// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file quary/service/v1/project_file.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message quary.service.v1.ProjectFile
 */
export class ProjectFile extends Message<ProjectFile> {
  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Source sources = 1;
   */
  sources: ProjectFile_Source[] = [];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Model models = 2;
   */
  models: ProjectFile_Model[] = [];

  constructor(data?: PartialMessage<ProjectFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ProjectFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sources", kind: "message", T: ProjectFile_Source, repeated: true },
    { no: 2, name: "models", kind: "message", T: ProjectFile_Model, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectFile {
    return new ProjectFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectFile {
    return new ProjectFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectFile {
    return new ProjectFile().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectFile | PlainMessage<ProjectFile> | undefined, b: ProjectFile | PlainMessage<ProjectFile> | undefined): boolean {
    return proto3.util.equals(ProjectFile, a, b);
  }
}

/**
 * Standard types are:
 * - not_null
 * - unique
 * - 'relationship' which takes into data (model and field)
 *
 * @generated from message quary.service.v1.ProjectFile.Column
 */
export class ProjectFile_Column extends Message<ProjectFile_Column> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated quary.service.v1.ColumnTest tests = 3;
   */
  tests: ColumnTest[] = [];

  constructor(data?: PartialMessage<ProjectFile_Column>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ProjectFile.Column";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "tests", kind: "message", T: ColumnTest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectFile_Column {
    return new ProjectFile_Column().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectFile_Column {
    return new ProjectFile_Column().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectFile_Column {
    return new ProjectFile_Column().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectFile_Column | PlainMessage<ProjectFile_Column> | undefined, b: ProjectFile_Column | PlainMessage<ProjectFile_Column> | undefined): boolean {
    return proto3.util.equals(ProjectFile_Column, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ProjectFile.Model
 */
export class ProjectFile_Model extends Message<ProjectFile_Model> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * The materialization of the model, available types are specified by each database.
   *
   * @generated from field: optional string materialization = 4;
   */
  materialization?: string;

  /**
   * @generated from field: repeated quary.service.v1.ModelTest tests = 5;
   */
  tests: ModelTest[] = [];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Column columns = 3;
   */
  columns: ProjectFile_Column[] = [];

  constructor(data?: PartialMessage<ProjectFile_Model>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ProjectFile.Model";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "materialization", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "tests", kind: "message", T: ModelTest, repeated: true },
    { no: 3, name: "columns", kind: "message", T: ProjectFile_Column, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectFile_Model {
    return new ProjectFile_Model().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectFile_Model {
    return new ProjectFile_Model().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectFile_Model {
    return new ProjectFile_Model().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectFile_Model | PlainMessage<ProjectFile_Model> | undefined, b: ProjectFile_Model | PlainMessage<ProjectFile_Model> | undefined): boolean {
    return proto3.util.equals(ProjectFile_Model, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ProjectFile.Source
 */
export class ProjectFile_Source extends Message<ProjectFile_Source> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated string tags = 6;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * The full path of the source table in the database. This is used to reference the table itself. For example:
   * - 'public.users' for where the schema is 'public' and the table is 'users'
   * - 'project_id_123.dataset_id_123.table_id_123' for a BigQuery table
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * @generated from field: repeated quary.service.v1.ModelTest tests = 5;
   */
  tests: ModelTest[] = [];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Column columns = 4;
   */
  columns: ProjectFile_Column[] = [];

  constructor(data?: PartialMessage<ProjectFile_Source>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ProjectFile.Source";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tests", kind: "message", T: ModelTest, repeated: true },
    { no: 4, name: "columns", kind: "message", T: ProjectFile_Column, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectFile_Source {
    return new ProjectFile_Source().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectFile_Source {
    return new ProjectFile_Source().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectFile_Source {
    return new ProjectFile_Source().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectFile_Source | PlainMessage<ProjectFile_Source> | undefined, b: ProjectFile_Source | PlainMessage<ProjectFile_Source> | undefined): boolean {
    return proto3.util.equals(ProjectFile_Source, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ColumnTest
 */
export class ColumnTest extends Message<ColumnTest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: map<string, string> info = 2;
   */
  info: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ColumnTest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ColumnTest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTest {
    return new ColumnTest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTest {
    return new ColumnTest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTest {
    return new ColumnTest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTest | PlainMessage<ColumnTest> | undefined, b: ColumnTest | PlainMessage<ColumnTest> | undefined): boolean {
    return proto3.util.equals(ColumnTest, a, b);
  }
}

/**
 * @generated from message quary.service.v1.ModelTest
 */
export class ModelTest extends Message<ModelTest> {
  /**
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * @generated from field: map<string, string> info = 2;
   */
  info: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ModelTest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "quary.service.v1.ModelTest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "info", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelTest {
    return new ModelTest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelTest {
    return new ModelTest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelTest {
    return new ModelTest().fromJsonString(jsonString, options);
  }

  static equals(a: ModelTest | PlainMessage<ModelTest> | undefined, b: ModelTest | PlainMessage<ModelTest> | undefined): boolean {
    return proto3.util.equals(ModelTest, a, b);
  }
}

