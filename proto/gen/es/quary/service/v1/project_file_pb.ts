// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file quary/service/v1/project_file.proto (package quary.service.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file quary/service/v1/project_file.proto.
 */
export const file_quary_service_v1_project_file: GenFile = /*@__PURE__*/
  fileDesc("CiNxdWFyeS9zZXJ2aWNlL3YxL3Byb2plY3RfZmlsZS5wcm90bxIQcXVhcnkuc2VydmljZS52MSKfBgoLUHJvamVjdEZpbGUSNAoHc291cmNlcxgBIAMoCzIjLnF1YXJ5LnNlcnZpY2UudjEuUHJvamVjdEZpbGVTb3VyY2USMwoGbW9kZWxzGAIgAygLMiMucXVhcnkuc2VydmljZS52MS5Qcm9qZWN0RmlsZS5Nb2RlbBI5CglzbmFwc2hvdHMYAyADKAsyJi5xdWFyeS5zZXJ2aWNlLnYxLlByb2plY3RGaWxlLlNuYXBzaG90GqwCCgVNb2RlbBIMCgRuYW1lGAEgASgJEgwKBHRhZ3MYBiADKAkSGAoLZGVzY3JpcHRpb24YAiABKAlIAIgBARIcCg9tYXRlcmlhbGl6YXRpb24YBCABKAlIAYgBARIqCgV0ZXN0cxgFIAMoCzIbLnF1YXJ5LnNlcnZpY2UudjEuTW9kZWxUZXN0EjUKD2RhdGFiYXNlX2NvbmZpZxgHIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RIAogBARI0Cgdjb2x1bW5zGAMgAygLMiMucXVhcnkuc2VydmljZS52MS5Qcm9qZWN0RmlsZUNvbHVtbkIOCgxfZGVzY3JpcHRpb25CEgoQX21hdGVyaWFsaXphdGlvbkISChBfZGF0YWJhc2VfY29uZmlnGqYBCghTbmFwc2hvdBIMCgRuYW1lGAEgASgJEgwKBHRhZ3MYBCADKAkSGAoLZGVzY3JpcHRpb24YBSABKAlIAIgBARISCgp1bmlxdWVfa2V5GAIgASgJEkAKCHN0cmF0ZWd5GAMgASgLMi4ucXVhcnkuc2VydmljZS52MS5Qcm9qZWN0RmlsZS5TbmFwc2hvdFN0cmF0ZWd5Qg4KDF9kZXNjcmlwdGlvbhppChBTbmFwc2hvdFN0cmF0ZWd5EkQKCXRpbWVzdGFtcBgBIAEoCzIvLnF1YXJ5LnNlcnZpY2UudjEuUHJvamVjdEZpbGUuVGltZXN0YW1wU3RyYXRlZ3lIAEIPCg1zdHJhdGVneV90eXBlGicKEVRpbWVzdGFtcFN0cmF0ZWd5EhIKCnVwZGF0ZWRfYXQYASABKAkiyQEKEVByb2plY3RGaWxlU291cmNlEgwKBG5hbWUYASABKAkSDAoEdGFncxgGIAMoCRIYCgtkZXNjcmlwdGlvbhgCIAEoCUgAiAEBEgwKBHBhdGgYAyABKAkSKgoFdGVzdHMYBSADKAsyGy5xdWFyeS5zZXJ2aWNlLnYxLk1vZGVsVGVzdBI0Cgdjb2x1bW5zGAQgAygLMiMucXVhcnkuc2VydmljZS52MS5Qcm9qZWN0RmlsZUNvbHVtbkIOCgxfZGVzY3JpcHRpb24ieAoRUHJvamVjdEZpbGVDb2x1bW4SDAoEbmFtZRgBIAEoCRIYCgtkZXNjcmlwdGlvbhgCIAEoCUgAiAEBEisKBXRlc3RzGAMgAygLMhwucXVhcnkuc2VydmljZS52MS5Db2x1bW5UZXN0Qg4KDF9kZXNjcmlwdGlvbiJ9CgpDb2x1bW5UZXN0EgwKBHR5cGUYASABKAkSNAoEaW5mbxgCIAMoCzImLnF1YXJ5LnNlcnZpY2UudjEuQ29sdW1uVGVzdC5JbmZvRW50cnkaKwoJSW5mb0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiewoJTW9kZWxUZXN0EgwKBHR5cGUYASABKAkSMwoEaW5mbxgCIAMoCzIlLnF1YXJ5LnNlcnZpY2UudjEuTW9kZWxUZXN0LkluZm9FbnRyeRorCglJbmZvRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUICUAFiBnByb3RvMw", [file_google_protobuf_struct]);

/**
 * @generated from message quary.service.v1.ProjectFile
 */
export type ProjectFile = Message<"quary.service.v1.ProjectFile"> & {
  /**
   * @generated from field: repeated quary.service.v1.ProjectFileSource sources = 1;
   */
  sources: ProjectFileSource[];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Model models = 2;
   */
  models: ProjectFile_Model[];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFile.Snapshot snapshots = 3;
   */
  snapshots: ProjectFile_Snapshot[];
};

/**
 * Describes the message quary.service.v1.ProjectFile.
 * Use `create(ProjectFileSchema)` to create a new message.
 */
export const ProjectFileSchema: GenMessage<ProjectFile> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 0);

/**
 * @generated from message quary.service.v1.ProjectFile.Model
 */
export type ProjectFile_Model = Message<"quary.service.v1.ProjectFile.Model"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Tags are used to group different parts of the project together. For example, you could tag all models that are
   * related to a specific department with the same tag.
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * The materialization of the model, available types are specified by each database.
   *
   * @generated from field: optional string materialization = 4;
   */
  materialization?: string;

  /**
   * @generated from field: repeated quary.service.v1.ModelTest tests = 5;
   */
  tests: ModelTest[];

  /**
   * @generated from field: optional google.protobuf.Struct database_config = 7;
   */
  databaseConfig?: JsonObject;

  /**
   * @generated from field: repeated quary.service.v1.ProjectFileColumn columns = 3;
   */
  columns: ProjectFileColumn[];
};

/**
 * Describes the message quary.service.v1.ProjectFile.Model.
 * Use `create(ProjectFile_ModelSchema)` to create a new message.
 */
export const ProjectFile_ModelSchema: GenMessage<ProjectFile_Model> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 0, 0);

/**
 * @generated from message quary.service.v1.ProjectFile.Snapshot
 */
export type ProjectFile_Snapshot = Message<"quary.service.v1.ProjectFile.Snapshot"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Tags are used to group different parts of the project together. For example, you could tag all models that are
   * related to a specific department with the same tag.
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[];

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * @generated from field: string unique_key = 2;
   */
  uniqueKey: string;

  /**
   * @generated from field: quary.service.v1.ProjectFile.SnapshotStrategy strategy = 3;
   */
  strategy?: ProjectFile_SnapshotStrategy;
};

/**
 * Describes the message quary.service.v1.ProjectFile.Snapshot.
 * Use `create(ProjectFile_SnapshotSchema)` to create a new message.
 */
export const ProjectFile_SnapshotSchema: GenMessage<ProjectFile_Snapshot> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 0, 1);

/**
 * @generated from message quary.service.v1.ProjectFile.SnapshotStrategy
 */
export type ProjectFile_SnapshotStrategy = Message<"quary.service.v1.ProjectFile.SnapshotStrategy"> & {
  /**
   * @generated from oneof quary.service.v1.ProjectFile.SnapshotStrategy.strategy_type
   */
  strategyType: {
    /**
     * @generated from field: quary.service.v1.ProjectFile.TimestampStrategy timestamp = 1;
     */
    value: ProjectFile_TimestampStrategy;
    case: "timestamp";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message quary.service.v1.ProjectFile.SnapshotStrategy.
 * Use `create(ProjectFile_SnapshotStrategySchema)` to create a new message.
 */
export const ProjectFile_SnapshotStrategySchema: GenMessage<ProjectFile_SnapshotStrategy> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 0, 2);

/**
 * @generated from message quary.service.v1.ProjectFile.TimestampStrategy
 */
export type ProjectFile_TimestampStrategy = Message<"quary.service.v1.ProjectFile.TimestampStrategy"> & {
  /**
   * @generated from field: string updated_at = 1;
   */
  updatedAt: string;
};

/**
 * Describes the message quary.service.v1.ProjectFile.TimestampStrategy.
 * Use `create(ProjectFile_TimestampStrategySchema)` to create a new message.
 */
export const ProjectFile_TimestampStrategySchema: GenMessage<ProjectFile_TimestampStrategy> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 0, 3);

/**
 * @generated from message quary.service.v1.ProjectFileSource
 */
export type ProjectFileSource = Message<"quary.service.v1.ProjectFileSource"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Tags are used to group different parts of the project together. For example, you could tag all sources that are
   * related to a specific department with the same tag.
   *
   * @generated from field: repeated string tags = 6;
   */
  tags: string[];

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * The full path of the source table in the database. This is used to reference the table itself. For example:
   * - 'public.users' for where the schema is 'public' and the table is 'users'
   * - 'project_id_123.dataset_id_123.table_id_123' for a BigQuery table
   *
   * @generated from field: string path = 3;
   */
  path: string;

  /**
   * @generated from field: repeated quary.service.v1.ModelTest tests = 5;
   */
  tests: ModelTest[];

  /**
   * @generated from field: repeated quary.service.v1.ProjectFileColumn columns = 4;
   */
  columns: ProjectFileColumn[];
};

/**
 * Describes the message quary.service.v1.ProjectFileSource.
 * Use `create(ProjectFileSourceSchema)` to create a new message.
 */
export const ProjectFileSourceSchema: GenMessage<ProjectFileSource> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 1);

/**
 * Standard types are:
 * - not_null
 * - unique
 * - 'relationship' which takes into data (model and field)
 *
 * @generated from message quary.service.v1.ProjectFileColumn
 */
export type ProjectFileColumn = Message<"quary.service.v1.ProjectFileColumn"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: repeated quary.service.v1.ColumnTest tests = 3;
   */
  tests: ColumnTest[];
};

/**
 * Describes the message quary.service.v1.ProjectFileColumn.
 * Use `create(ProjectFileColumnSchema)` to create a new message.
 */
export const ProjectFileColumnSchema: GenMessage<ProjectFileColumn> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 2);

/**
 * @generated from message quary.service.v1.ColumnTest
 */
export type ColumnTest = Message<"quary.service.v1.ColumnTest"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: map<string, string> info = 2;
   */
  info: { [key: string]: string };
};

/**
 * Describes the message quary.service.v1.ColumnTest.
 * Use `create(ColumnTestSchema)` to create a new message.
 */
export const ColumnTestSchema: GenMessage<ColumnTest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 3);

/**
 * @generated from message quary.service.v1.ModelTest
 */
export type ModelTest = Message<"quary.service.v1.ModelTest"> & {
  /**
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * @generated from field: map<string, string> info = 2;
   */
  info: { [key: string]: string };
};

/**
 * Describes the message quary.service.v1.ModelTest.
 * Use `create(ModelTestSchema)` to create a new message.
 */
export const ModelTestSchema: GenMessage<ModelTest> = /*@__PURE__*/
  messageDesc(file_quary_service_v1_project_file, 4);

